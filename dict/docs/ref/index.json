{
  "ProseMirror is structured as a number of separate modules. This reference manual describes the exported API per module. If you want to use something from the prosemirror-state module, for example, you can import it like this:": {
    "_translate": "ProseMirror 结构为多个独立的模块。本参考手册按模块描述导出的 API。如果你想使用\n        <a href=\"#state\"><code>prosemirror-state</code></a> 模块中的某些内容，例如，\n        你可以这样导入：",
    "_note": ""
  },
  "This is the reference manual for the ProseMirror rich text editor. It lists and describes the full public API exported by the library. For more introductory material, please see the guide.": {
    "_translate": "这是<a href=\"https://prosemirror.net\">ProseMirror</a>富文本编辑器的参考手册。它列出了该库导出的完整公共API并进行了描述。有关更多入门材料，请参阅<a href=\"/docs/guide/\">指南</a>。",
    "_note": ""
  },
  "Or, using ES6 syntax:": {
    "_translate": "或者，使用 ES6 语法：",
    "_note": ""
  },
  "This module implements the state object of a ProseMirror editor, along with the representation of the selection and the plugin abstraction.": {
    "_translate": "此模块实现了ProseMirror编辑器的状态对象，以及选择的表示和插件抽象。",
    "_note": ""
  },
  "ProseMirror keeps all editor state (the things, basically, that would be required to create an editor just like the current one) in a single object. That object is updated (creating a new state) by applying transactions to it.": {
    "_translate": "ProseMirror 将所有编辑器状态（基本上是创建一个与当前编辑器相同的编辑器所需的东西）保存在一个单一的<a href=\"#state.EditorState\">对象</a>中。通过对其应用<a href=\"#state.Transaction\">事务</a>来更新该对象（创建一个新的状态）。",
    "_note": ""
  },
  "The state of a ProseMirror editor is represented by an object of this type. A state is a persistent data structure—it isn't updated, but rather a new state value is computed from an old one using the apply method.": {
    "_translate": "ProseMirror 编辑器的状态由此类型的对象表示。状态是一种持久的数据结构——它不会被更新，而是使用<a href=\"#state.EditorState.apply\"><code>apply</code></a>方法从旧状态计算出新状态值。",
    "_note": ""
  },
  "A state holds a number of built-in fields, and plugins can define additional fields.": {
    "_translate": "一个状态包含多个内置字段，插件可以<a href=\"#state.PluginSpec.state\">定义</a>额外的字段。",
    "_note": ""
  },
  "The current document.": {
    "_translate": "当前文档。",
    "_note": ""
  },
  "The selection.": {
    "_translate": "选择。",
    "_note": ""
  },
  "The schema of the state's document.": {
    "_translate": "该州文件的架构。",
    "_note": ""
  },
  "A set of marks to apply to the next input. Will be null when no explicit marks have been set.": {
    "_translate": "一组标记应用于下一个输入。当没有设置显式标记时，将为 null。",
    "_note": ""
  },
  "The plugins that are active in this state.": {
    "_translate": "处于此状态的插件。",
    "_note": ""
  },
  "Apply the given transaction to produce a new state.": {
    "_translate": "应用给定的事务以生成新状态。",
    "_note": ""
  },
  "Verbose variant of apply that returns the precise transactions that were applied (which might be influenced by the transaction hooks of plugins) along with the new state.": {
    "_translate": "详细版本的\n                <a href=\"#state.EditorState.apply\"><code>apply</code></a>\n                返回应用的精确事务（可能会受到插件的\n                <a href=\"#state.PluginSpec.filterTransaction\">事务钩子</a>\n                的影响）以及新状态。",
    "_note": ""
  },
  "Start a transaction from this state.": {
    "_translate": "从此状态<a href=\"#state.Transaction\">开始交易</a>。",
    "_note": ""
  },
  "Create a new state based on this one, but with an adjusted set of active plugins. State fields that exist in both sets of plugins are kept unchanged. Those that no longer exist are dropped, and those that are new are initialized using their init method, passing in the new configuration object..": {
    "_translate": "创建一个基于此状态的新状态，但调整了活动插件集。两个插件集中都存在的状态字段保持不变。不再存在的字段将被删除，新的字段将使用其<a href=\"#state.StateField.init\"><code>init</code></a>方法进行初始化，并传入新的配置对象。",
    "_note": ""
  },
  "New set of active plugins.": {
    "_translate": "新的活动插件集。",
    "_note": ""
  },
  "Create a new state.": {
    "_translate": "创建一个新状态。",
    "_note": ""
  },
  "Serialize this state to JSON. If you want to serialize the state of plugins, pass an object mapping property names to use in the resulting JSON object to plugin objects. The argument may also be a string or number, in which case it is ignored, to support the way JSON.stringify calls toString methods.": {
    "_translate": "将此状态序列化为JSON。如果要序列化插件的状态，请传递一个对象，将属性名称映射到插件对象中使用的结果JSON对象。该参数也可以是字符串或数字，在这种情况下会被忽略，以支持<code>JSON.stringify</code>调用<code>toString</code>方法的方式。",
    "_note": ""
  },
  "Deserialize a JSON representation of a state. config should have at least a schema field, and should contain array of plugins to initialize the state with. pluginFields can be used to deserialize the state of plugins, by associating plugin instances with the property names they use in the JSON object.": {
    "_translate": "反序列化状态的 JSON 表示。\n                <code>config</code> 至少应包含一个\n                <code>schema</code> 字段，并且应包含用于初始化状态的插件数组。<code>pluginFields</code> 可以\n                用于反序列化插件的状态，通过将插件实例与它们在 JSON 对象中使用的属性名称关联起来。",
    "_note": ""
  },
  "The schema to use.": {
    "_translate": "要使用的架构。",
    "_note": ""
  },
  "The set of active plugins.": {
    "_translate": "活动插件集。",
    "_note": ""
  },
  "The type of object passed to EditorState.create.": {
    "_translate": "传递给<a href=\"#state.EditorState%5Ecreate\"><code>EditorState.create</code></a>的对象类型。",
    "_note": ""
  },
  "The schema to use (only relevant if no doc is specified).": {
    "_translate": "要使用的模式（仅在未指定<code>doc</code>时相关）。",
    "_note": ""
  },
  "The starting document. Either this or schema must be provided.": {
    "_translate": "起始文档。必须提供此文档或<code>schema</code><em>。</em>",
    "_note": ""
  },
  "A valid selection in the document.": {
    "_translate": "文档中的有效选择。",
    "_note": ""
  },
  "The initial set of stored marks.": {
    "_translate": "初始设置\n                <a href=\"#state.EditorState.storedMarks\">存储的标记</a>。",
    "_note": ""
  },
  "The plugins that should be active in this state.": {
    "_translate": "应在此状态下激活的插件。",
    "_note": ""
  },
  "An editor state transaction, which can be applied to a state to create an updated state. Use EditorState.tr to create an instance.": {
    "_translate": "一个编辑器状态事务，可以应用于一个状态以创建一个更新的状态。使用\n<a href=\"#state.EditorState.tr\"><code>EditorState.tr</code></a>\n来创建一个实例。",
    "_note": ""
  },
  "Transactions track changes to the document (they are a subclass of Transform), but also other state changes, like selection updates and adjustments of the set of stored marks. In addition, you can store metadata properties in a transaction, which are extra pieces of information that client code or plugins can use to describe what a transaction represents, so that they can update their own state accordingly.": {
    "_translate": "事务跟踪文档的更改（它们是<a href=\"#transform.Transform\"><code>Transform</code></a>的子类），但也包括其他状态更改，如选择更新和<a href=\"#state.EditorState.storedMarks\">存储标记</a>集的调整。此外，您可以在事务中存储元数据属性，这些属性是客户端代码或插件可以使用的额外信息，用于描述事务代表的内容，以便它们可以相应地更新其<a href=\"#state.StateField\">自己的状态</a>。",
    "_note": ""
  },
  "The timestamp associated with this transaction, in the same format as Date.now().": {
    "_translate": "与此交易关联的时间戳，格式与<code>Date.now()</code>相同。",
    "_note": ""
  },
  "The editor view uses a few metadata properties: it will attach a property \"pointer\" with the value true to selection transactions directly caused by mouse or touch input, a \"composition\" property holding an ID identifying the composition that caused it to transactions caused by composed DOM input, and a \"uiEvent\" property of that may be \"paste\", \"cut\", or \"drop\".": {
    "_translate": "<a href=\"#view.EditorView\">编辑器视图</a> 使用了一些元数据属性：它会将一个属性 <code>\"pointer\"</code> 值为 <code>true</code> 附加到由鼠标或触摸输入直接引起的选择事务上，一个 <code>\"composition\"</code> 属性持有一个 ID 标识符，标识由组合 DOM 输入引起的事务的组合，以及一个 <code>\"uiEvent\"</code> 属性，可能是 <code>\"paste\"</code>、<code>\"cut\"</code> 或 <code>\"drop\"</code>。",
    "_note": ""
  },
  "The stored marks set by this transaction, if any.": {
    "_translate": "此交易设置的存储标记（如果有）。",
    "_note": ""
  },
  "The transaction's current selection. This defaults to the editor selection mapped through the steps in the transaction, but can be overwritten with setSelection.": {
    "_translate": "交易的当前选择。默认情况下，这是通过交易中的步骤<a href=\"#state.Selection.map\">映射</a>到编辑器选择，但可以用<a href=\"#state.Transaction.setSelection\"><code>setSelection</code></a>覆盖。",
    "_note": ""
  },
  "Update the transaction's current selection. Will determine the selection that the editor gets when the transaction is applied.": {
    "_translate": "更新交易的当前选择。将确定在应用交易时编辑器获得的选择。",
    "_note": ""
  },
  "Whether the selection was explicitly updated by this transaction.": {
    "_translate": "该事务是否显式更新了选择内容。",
    "_note": ""
  },
  "Set the current stored marks.": {
    "_translate": "设置当前存储的标记。",
    "_note": ""
  },
  "Make sure the current stored marks or, if that is null, the marks at the selection, match the given set of marks. Does nothing if this is already the case.": {
    "_translate": "确保当前存储的标记，或者如果为空，则确保选择的标记与给定的标记集匹配。如果已经是这种情况，则不执行任何操作。",
    "_note": ""
  },
  "Add a mark to the set of stored marks.": {
    "_translate": "添加标记到存储的标记集合。",
    "_note": ""
  },
  "Remove a mark or mark type from the set of stored marks.": {
    "_translate": "从存储的标记集中删除标记或标记类型。",
    "_note": ""
  },
  "Whether the stored marks were explicitly set for this transaction.": {
    "_translate": "是否为此交易显式设置了存储的标记。",
    "_note": ""
  },
  "Update the timestamp for the transaction.": {
    "_translate": "更新交易的时间戳。",
    "_note": ""
  },
  "Replace the current selection with the given slice.": {
    "_translate": "将当前选择替换为给定的切片。",
    "_note": ""
  },
  "Delete the selection.": {
    "_translate": "删除所选内容。",
    "_note": ""
  },
  "Replace the selection with the given node. When inheritMarks is true and the content is inline, it inherits the marks from the place where it is inserted.": {
    "_translate": "将选定内容替换为给定节点。当<code>inheritMarks</code>为true且内容为内联时，它将继承插入位置的标记。",
    "_note": ""
  },
  "Replace the given range, or the selection if no range is given, with a text node containing the given string.": {
    "_translate": "替换给定范围，或在未给定范围时替换选定内容，\n                用包含给定字符串的文本节点。",
    "_note": ""
  },
  "Store a metadata property in this transaction, keyed either by name or by plugin.": {
    "_translate": "在此事务中存储一个元数据属性，可以通过名称或插件进行键控。",
    "_note": ""
  },
  "Retrieve a metadata property for a given name or plugin.": {
    "_translate": "检索给定名称或插件的元数据属性。",
    "_note": ""
  },
  "Indicate that the editor should scroll the selection into view when updated to the state produced by this transaction.": {
    "_translate": "指示编辑器在更新到此事务生成的状态时应滚动选择内容以使其可见",
    "_note": ""
  },
  "Returns true if this transaction doesn't contain any metadata, and can thus safely be extended.": {
    "_translate": "如果此交易不包含任何元数据，则返回 true，因此可以安全地扩展。",
    "_note": ""
  },
  "Commands are functions that take a state and a an optional transaction dispatch function and...": {
    "_translate": "命令是一些函数，它们接受一个状态和一个可选的事务分发函数，并且...",
    "_note": ""
  },
  "True when this transaction has had scrollIntoView called on it.": {
    "_translate": "True when this transaction has had\n                <code>scrollIntoView</code> called on it.",
    "_note": ""
  },
  "In some cases, the editor view is passed as a third argument.": {
    "_translate": "在某些情况下，编辑器视图作为第三个参数传递。",
    "_note": ""
  },
  "A ProseMirror selection can be one of several types. This module defines types for classical text selections (of which cursors are a special case) and node selections, where a specific document node is selected. It is possible to extend the editor with custom selection types.": {
    "_translate": "ProseMirror 选择可以是几种类型之一。此模块定义了经典的<a href=\"#state.TextSelection\">文本选择</a>（其中光标是一个特殊情况）和<a href=\"#state.NodeSelection\"><em>节点</em>选择</a>的类型，其中选择了特定的文档节点。可以通过自定义选择类型来扩展编辑器。",
    "_note": ""
  },
  "Superclass for editor selections. Every selection type should extend this. Should not be instantiated directly.": {
    "_translate": "编辑器选择的超类。每种选择类型都应扩展此类。不应直接实例化。",
    "_note": ""
  },
  "Initialize a selection with the head and anchor and ranges. If no ranges are given, constructs a single range across $anchor and $head.": {
    "_translate": "初始化一个包含头部和锚点以及范围的选择。如果没有给定范围，则在<code>$anchor</code>和<code>$head</code>之间构建一个单一范围。",
    "_note": ""
  },
  "The resolved anchor of the selection (the side that stays in place when the selection is modified).": {
    "_translate": "选择的已解析锚点（在修改选择时保持不变的一侧）。",
    "_note": ""
  },
  "The resolved head of the selection (the side that moves when the selection is modified).": {
    "_translate": "选择的已解决头（选择被修改时移动的一侧）。",
    "_note": ""
  },
  "The ranges covered by the selection.": {
    "_translate": "选择范围涵盖。",
    "_note": ""
  },
  "The selection's anchor, as an unresolved position.": {
    "_translate": "选择的锚点，作为一个未解决的位置。",
    "_note": ""
  },
  "The selection's head.": {
    "_translate": "选择的头。",
    "_note": ""
  },
  "The lower bound of the selection's main range.": {
    "_translate": "选择的主要范围的下限。",
    "_note": ""
  },
  "The upper bound of the selection's main range.": {
    "_translate": "选择主范围的上限。",
    "_note": ""
  },
  "The resolved lower bound of the selection's main range.": {
    "_translate": "选择的主要范围的已解决下限。",
    "_note": ""
  },
  "The resolved upper bound of the selection's main range.": {
    "_translate": "选择的主要范围的已解决上限。",
    "_note": ""
  },
  "Indicates whether the selection contains any content.": {
    "_translate": "指示选择是否包含任何内容。",
    "_note": ""
  },
  "Test whether the selection is the same as another selection.": {
    "_translate": "测试选择是否与另一个选择相同。",
    "_note": ""
  },
  "Map this selection through a mappable thing. doc should be the new document to which we are mapping.": {
    "_translate": "将此选择映射到一个\n                <a href=\"#transform.Mappable\">可映射</a>的事物。\n                <code>doc</code> 应该是我们要映射到的新文档。",
    "_note": ""
  },
  "Get the content of this selection as a slice.": {
    "_translate": "获取此选择的内容作为切片。",
    "_note": ""
  },
  "Replace the selection with a slice or, if no slice is given, delete the selection. Will append to the given transaction.": {
    "_translate": "将所选内容替换为切片，如果未提供切片，则删除所选内容。将附加到给定的事务。",
    "_note": ""
  },
  "Replace the selection with the given node, appending the changes to the given transaction.": {
    "_translate": "用给定的节点替换所选内容，并将更改附加到给定的事务。",
    "_note": ""
  },
  "Convert the selection to a JSON representation. When implementing this for a custom selection class, make sure to give the object a type property whose value matches the ID under which you registered your class.": {
    "_translate": "将选定内容转换为JSON表示形式。在为自定义选择类实现此功能时，请确保为对象提供一个<code>type</code>属性，其值与您<a href=\"#state.Selection%5EjsonID\">注册</a>类的ID匹配。",
    "_note": ""
  },
  "Get a bookmark for this selection, which is a value that can be mapped without having access to a current document, and later resolved to a real selection for a given document again. (This is used mostly by the history to track and restore old selections.) The default implementation of this method just converts the selection to a text selection and returns the bookmark for that.": {
    "_translate": "获取此选择的<a href=\"#state.SelectionBookmark\">书签</a>，这是一个无需访问当前文档即可映射的值，稍后可以再次解析为给定文档的实际选择。（这主要由历史记录用于跟踪和恢复旧选择。）此方法的默认实现只是将选择转换为文本选择并返回其书签。",
    "_note": ""
  },
  "Controls whether, when a selection of this type is active in the browser, the selected range should be visible to the user. Defaults to true.": {
    "_translate": "控制是否在浏览器中激活此类型的选择时，所选范围应对用户可见。默认值为<code>true</code>。",
    "_note": ""
  },
  "Find a valid cursor or leaf node selection starting at the given position and searching back if dir is negative, and forward if positive. When textOnly is true, only consider cursor selections. Will return null when no valid selection position is found.": {
    "_translate": "找到一个有效的光标或叶节点选择，从给定位置开始，如果<code>dir</code>为负数则向后搜索，如果为正数则向前搜索。当<code>textOnly</code>为真时，只考虑光标选择。当没有找到有效的选择位置时，将返回null。",
    "_note": ""
  },
  "Find a valid cursor or leaf node selection near the given position. Searches forward first by default, but if bias is negative, it will search backwards first.": {
    "_translate": "找到给定位置附近的有效光标或叶节点选择。默认情况下先向前搜索，但如果<code>bias</code>为负数，则先向后搜索。",
    "_note": ""
  },
  "Find the cursor or leaf node selection closest to the start of the given document. Will return an AllSelection if no valid position exists.": {
    "_translate": "找到最接近给定文档开头的光标或叶节点选择。如果不存在有效位置，将返回一个<a href=\"#state.AllSelection\"><code>AllSelection</code></a>。",
    "_note": ""
  },
  "Find the cursor or leaf node selection closest to the end of the given document.": {
    "_translate": "找到最接近给定文档末尾的光标或叶节点选择。",
    "_note": ""
  },
  "Deserialize the JSON representation of a selection. Must be implemented for custom classes (as a static class method).": {
    "_translate": "反序列化选择的JSON表示。必须为自定义类实现（作为静态类方法）。",
    "_note": ""
  },
  "To be able to deserialize selections from JSON, custom selection classes must register themselves with an ID string, so that they can be disambiguated. Try to pick something that's unlikely to clash with classes from other modules.": {
    "_translate": "为了能够从 JSON 反序列化选择项，自定义选择类必须使用一个 ID 字符串注册自己，以便它们可以被区分开来。尽量选择一些不太可能与其他模块的类冲突的内容。",
    "_note": ""
  },
  "A text selection represents a classical editor selection, with a head (the moving side) and anchor (immobile side), both of which point into textblock nodes. It can be empty (a regular cursor position).": {
    "_translate": "一个文本选择表示一个经典的编辑器选择，具有一个头（移动端）和锚（固定端），两者都指向文本块节点。它可以是空的（一个常规的光标位置）。",
    "_note": ""
  },
  "Construct a text selection between the given points.": {
    "_translate": "在给定点之间构建文本选择。",
    "_note": ""
  },
  "Returns a resolved position if this is a cursor selection (an empty text selection), and null otherwise.": {
    "_translate": "如果这是一个光标选择（一个空的文本选择），则返回一个已解析的位置，否则返回 null。",
    "_note": ""
  },
  "Create a text selection from non-resolved positions.": {
    "_translate": "从未解析的位置创建文本选择。",
    "_note": ""
  },
  "Return a text selection that spans the given positions or, if they aren't text positions, find a text selection near them. bias determines whether the method searches forward (default) or backwards (negative number) first. Will fall back to calling Selection.near when the document doesn't contain a valid text position.": {
    "_translate": "返回跨越给定位置的文本选择，或者，如果它们不是文本位置，则在它们附近找到一个文本选择。\n<code>bias</code>决定方法是先向前搜索（默认）还是先向后搜索（负数）。当文档不包含有效的文本位置时，将回退调用\n<a href=\"#state.Selection%5Enear\"><code>Selection.near</code></a>。",
    "_note": ""
  },
  "Create a node selection. Does not verify the validity of its argument.": {
    "_translate": "创建节点选择。不验证其参数的有效性。",
    "_note": ""
  },
  "A node selection is a selection that points at a single node. All nodes marked selectable can be the target of a node selection. In such a selection, from and to point directly before and after the selected node, anchor equals from, and head equals to..": {
    "_translate": "一个节点选择是指向单个节点的选择。所有标记为<a href=\"#model.NodeSpec.selectable\">可选择的</a>节点都可以成为节点选择的目标。在这样的选择中，<code>from</code>和<code>to</code>直接指向所选节点之前和之后，<code>anchor</code>等于<code>from</code>，<code>head</code>等于<code>to</code>。",
    "_note": ""
  },
  "The selected node.": {
    "_translate": "所选节点。",
    "_note": ""
  },
  "Create a node selection from non-resolved positions.": {
    "_translate": "从未解析的位置创建节点选择。",
    "_note": ""
  },
  "Determines whether the given node may be selected as a node selection.": {
    "_translate": "确定是否可以选择给定节点作为节点选择。",
    "_note": ""
  },
  "A selection type that represents selecting the whole document (which can not necessarily be expressed with a text selection, when there are for example leaf block nodes at the start or end of the document).": {
    "_translate": "一种表示选择整个文档的选择类型（当文档的开头或结尾有叶块节点时，不一定能用文本选择来表示）。",
    "_note": ""
  },
  "Create an all-selection over the given document.": {
    "_translate": "在给定的文档上创建一个全选。",
    "_note": ""
  },
  "Represents a selected range in a document.": {
    "_translate": "表示文档中选定的范围。",
    "_note": ""
  },
  "Create a range.": {
    "_translate": "创建一个范围。",
    "_note": ""
  },
  "The lower bound of the range.": {
    "_translate": "范围的下限。",
    "_note": ""
  },
  "The upper bound of the range.": {
    "_translate": "范围的上限。",
    "_note": ""
  },
  "A lightweight, document-independent representation of a selection. You can define a custom bookmark type for a custom selection class to make the history handle it well.": {
    "_translate": "一个轻量级的、与文档无关的选择表示。\n你可以为自定义选择类定义一个自定义书签类型，以便历史记录能够很好地处理它。",
    "_note": ""
  },
  "Map the bookmark through a set of changes.": {
    "_translate": "将书签映射到一组更改。",
    "_note": ""
  },
  "Resolve the bookmark to a real selection again. This may need to do some error checking and may fall back to a default (usually TextSelection.between) if mapping made the bookmark invalid.": {
    "_translate": "将书签再次解析为实际选择。这可能需要进行一些错误检查，并且如果映射使书签无效，可能会回退到默认值（通常是<a href=\"#state.TextSelection%5Ebetween\"><code>TextSelection.between</code></a>）。",
    "_note": ""
  },
  "To make it easy to package and enable extra editor functionality, ProseMirror has a plugin system.": {
    "_translate": "为了便于打包和启用额外的编辑器功能，ProseMirror 有一个插件系统。",
    "_note": ""
  },
  "This is the type passed to the Plugin constructor. It provides a definition for a plugin.": {
    "_translate": "这是传递给<a href=\"#state.Plugin\"><code>Plugin</code></a>构造函数的类型。它提供了插件的定义。",
    "_note": ""
  },
  "The view props added by this plugin. Props that are functions will be bound to have the plugin instance as their this binding.": {
    "_translate": "该<a href=\"#view.EditorProps\">视图属性</a>由此插件添加。作为函数的属性将绑定插件实例作为它们的<code>this</code>绑定。",
    "_note": ""
  },
  "Allows a plugin to define a state field, an extra slot in the state object in which it can keep its own data.": {
    "_translate": "允许插件定义一个<a href=\"#state.StateField\">状态字段</a>，即状态对象中的一个额外槽位，用于存储插件自己的数据。",
    "_note": ""
  },
  "Can be used to make this a keyed plugin. You can have only one plugin with a given key in a given state, but it is possible to access the plugin's configuration and state through the key, without having access to the plugin instance object.": {
    "_translate": "可以用来使其成为一个带键的插件。你在一个给定状态中只能有一个具有给定键的插件，但可以通过键访问插件的配置和状态，而无需访问插件实例对象。",
    "_note": ""
  },
  "When the plugin needs to interact with the editor view, or set something up in the DOM, use this field. The function will be called when the plugin's state is associated with an editor view.": {
    "_translate": "当插件需要与编辑器视图交互或在DOM中设置某些内容时，请使用此字段。插件的状态与编辑器视图关联时将调用该函数。",
    "_note": ""
  },
  "When present, this will be called before a transaction is applied by the state, allowing the plugin to cancel it (by returning false).": {
    "_translate": "在存在时，这将在事务被状态应用之前被调用，允许插件取消它（通过返回 false）。",
    "_note": ""
  },
  "Allows the plugin to append another transaction to be applied after the given array of transactions. When another plugin appends a transaction after this was called, it is called again with the new state and new transactions—but only the new transactions, i.e. it won't be passed transactions that it already saw.": {
    "_translate": "允许插件在给定的交易数组之后附加另一个要应用的交易。当另一个插件在此调用之后附加交易时，它会再次被调用，并带有新的状态和新的交易——但仅限于新的交易，即它不会传递已经看到的交易。",
    "_note": ""
  },
  "Additional properties are allowed on plugin specs, which can be read via Plugin.spec.": {
    "_translate": "插件规格允许附加属性，可以通过<a href=\"#state.Plugin.spec\"><code>Plugin.spec</code></a>读取。",
    "_note": ""
  },
  "A plugin spec may provide a state field (under its state property) of this type, which describes the state it wants to keep. Functions provided here are always called with the plugin instance as their this binding.": {
    "_translate": "插件规范可能会提供一个状态字段（在其\n            <a href=\"#state.PluginSpec.state\"><code>state</code></a> 属性下），\n            这种类型描述了它想要保持的状态。这里提供的函数总是以插件实例作为它们的\n            <code>this</code> 绑定。",
    "_note": ""
  },
  "Initialize the value of the field. config will be the object passed to EditorState.create. Note that instance is a half-initialized state instance, and will not have values for plugin fields initialized after this one.": {
    "_translate": "初始化字段的值。<code>config</code> 将是传递给 <a href=\"#state.EditorState%5Ecreate\"><code>EditorState.create</code></a> 的对象。请注意，<code>instance</code> 是一个半初始化的状态实例，并且在此之后初始化的插件字段将不会有值。",
    "_note": ""
  },
  "Apply the given transaction to this state field, producing a new field value. Note that the newState argument is again a partially constructed state does not yet contain the state from plugins coming after this one.": {
    "_translate": "将给定的事务应用于此状态字段，生成一个新的字段值。请注意，<code>newState</code> 参数仍然是一个部分构建的状态，尚未包含在此之后的插件的状态。",
    "_note": ""
  },
  "Convert this field to JSON. Optional, can be left off to disable JSON serialization for the field.": {
    "_translate": "将此字段转换为JSON。可选，可以省略以禁用该字段的JSON序列化。",
    "_note": ""
  },
  "Deserialize the JSON representation of this field. Note that the state argument is again a half-initialized state.": {
    "_translate": "反序列化此字段的 JSON 表示。请注意，<code>state</code> 参数再次是一个半初始化状态。",
    "_note": ""
  },
  "A stateful object that can be installed in an editor by a plugin.": {
    "_translate": "一个有状态的对象，可以通过<a href=\"#state.PluginSpec.view\">插件</a>安装在编辑器中。",
    "_note": ""
  },
  "Called whenever the view's state is updated.": {
    "_translate": "在视图的状态更新时调用。",
    "_note": ""
  },
  "Called when the view is destroyed or receives a state with different plugins.": {
    "_translate": "在视图被销毁或接收到具有不同插件的状态时调用。",
    "_note": ""
  },
  "Plugins bundle functionality that can be added to an editor. They are part of the editor state and may influence that state and the view that contains it.": {
    "_translate": "插件捆绑可以添加到编辑器的功能。它们是<a href=\"#state.EditorState\">编辑器状态</a>的一部分，并且可能会影响该状态和包含它的视图。",
    "_note": ""
  },
  "Create a plugin.": {
    "_translate": "创建插件。",
    "_note": ""
  },
  "The plugin's spec object.": {
    "_translate": "插件的<a href=\"#state.PluginSpec\">spec 对象</a>。",
    "_note": ""
  },
  "The props exported by this plugin.": {
    "_translate": "该<a href=\"#view.EditorProps\">插件</a>导出的属性。",
    "_note": ""
  },
  "Extract the plugin's state field from an editor state.": {
    "_translate": "从编辑器状态中提取插件的状态字段。",
    "_note": ""
  },
  "A key is used to tag plugins in a way that makes it possible to find them, given an editor state. Assigning a key does mean only one plugin of that type can be active in a state.": {
    "_translate": "一个键用于<a href=\"#state.PluginSpec.key\">标记</a>插件，使得在给定的编辑器状态下可以找到它们。分配一个键意味着在一个状态中只能有一个该类型的插件处于活动状态。",
    "_note": ""
  },
  "Create a plugin key.": {
    "_translate": "创建插件密钥。",
    "_note": ""
  },
  "Get the active plugin with this key, if any, from an editor state.": {
    "_translate": "从编辑器状态中获取具有此键的活动插件（如果有）。",
    "_note": ""
  },
  "Get the plugin's state from an editor state.": {
    "_translate": "从编辑器状态获取插件的状态。",
    "_note": ""
  },
  "Make sure you load style/prosemirror.css as a stylesheet when using this module.": {
    "_translate": "确保在使用此模块时将<code>style/prosemirror.css</code>作为样式表加载。",
    "_note": ""
  },
  "ProseMirror's view module displays a given editor state in the DOM, and handles user events.": {
    "_translate": "ProseMirror 的视图模块在 DOM 中显示给定的 <a href=\"#state.EditorState\">编辑器状态</a>，并处理用户事件。",
    "_note": ""
  },
  "An editor view manages the DOM structure that represents an editable document. Its state and behavior are determined by its props.": {
    "_translate": "编辑器视图管理表示可编辑文档的DOM结构。其状态和行为由其<a href=\"#view.DirectEditorProps\">属性</a>决定。",
    "_note": ""
  },
  "Create a view. place may be a DOM node that the editor should be appended to, a function that will place it into the document, or an object whose mount property holds the node to use as the document container. If it is null, the editor will not be added to the document.": {
    "_translate": "创建一个视图。<code>place</code> 可以是一个要附加编辑器的 DOM 节点，一个将其放入文档的函数，或一个其 <code>mount</code> 属性包含用作文档容器的节点的对象。如果它是 <code>null</code>，编辑器将不会被添加到文档中。",
    "_note": ""
  },
  "The view's current state.": {
    "_translate": "视图的当前<a href=\"#state.EditorState\">状态</a>。",
    "_note": ""
  },
  "An editable DOM node containing the document. (You probably should not directly interfere with its content.)": {
    "_translate": "一个可编辑的DOM节点，包含文档。（你可能不应该直接干扰其内容。）",
    "_note": ""
  },
  "Indicates whether the editor is currently editable.": {
    "_translate": "指示编辑器当前是否<a href=\"#view.EditorProps.editable\">可编辑</a>。",
    "_note": ""
  },
  "When editor content is being dragged, this object contains information about the dragged slice and whether it is being copied or moved. At any other time, it is null.": {
    "_translate": "当编辑器内容被拖动时，此对象包含有关被拖动切片的信息以及它是被复制还是移动。在任何其他时间，它都是空的。",
    "_note": ""
  },
  "Holds true when a composition is active.": {
    "_translate": "在<a href=\"https://w3c.github.io/uievents/#events-compositionevents\">组合</a>活动时保持<code>true</code>。",
    "_note": ""
  },
  "The view's current props.": {
    "_translate": "视图的当前<a href=\"#view.EditorProps\">属性</a>。",
    "_note": ""
  },
  "Update the view's props. Will immediately cause an update to the DOM.": {
    "_translate": "更新视图的属性。将立即导致对DOM的更新。",
    "_note": ""
  },
  "Update the editor's state prop, without touching any of the other props.": {
    "_translate": "更新编辑器的<code>state</code>属性，而不触及任何其他属性。",
    "_note": ""
  },
  "Update the view by updating existing props object with the object given as argument. Equivalent to view.update(Object.assign({}, view.props, props)).": {
    "_translate": "通过使用作为参数给定的对象更新现有的props对象来更新视图。相当于<code>view.update(Object.assign({}, view.props, props))</code>。",
    "_note": ""
  },
  "Goes over the values of a prop, first those provided directly, then those from plugins given to the view, then from plugins in the state (in order), and calls f every time a non-undefined value is found. When f returns a truthy value, that is immediately returned. When f isn't provided, it is treated as the identity function (the prop value is returned directly).": {
    "_translate": "依次遍历一个 prop 的值，首先是直接提供的值，然后是视图中插件提供的值，再然后是状态中的插件提供的值（按顺序），每次找到非 undefined 的值时调用 <code>f</code>。当 <code>f</code> 返回一个真值时，立即返回该值。当未提供 <code>f</code> 时，将其视为恒等函数（直接返回 prop 值）。",
    "_note": ""
  },
  "Query whether the view has focus.": {
    "_translate": "查询视图是否有焦点。",
    "_note": ""
  },
  "Focus the editor.": {
    "_translate": "专注于编辑器。",
    "_note": ""
  },
  "Get the document root in which the editor exists. This will usually be the top-level document, but might be a shadow DOM root if the editor is inside one.": {
    "_translate": "获取编辑器所在的文档根。这通常是顶级的<code>document</code>，但如果编辑器在<a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM\">shadow DOM</a>根内，则可能是shadow DOM根。",
    "_note": ""
  },
  "When an existing editor view is moved to a new document or shadow tree, call this to make it recompute its root.": {
    "_translate": "当现有编辑器视图移动到新文档或影子树时，调用此函数以重新计算其根。",
    "_note": ""
  },
  "Given a pair of viewport coordinates, return the document position that corresponds to them. May return null if the given coordinates aren't inside of the editor. When an object is returned, its pos property is the position nearest to the coordinates, and its inside property holds the position of the inner node that the position falls inside of, or -1 if it is at the top level, not in any node.": {
    "_translate": "给定一对视口坐标，返回与之对应的文档位置。如果给定的坐标不在编辑器内，可能会返回 null。当返回一个对象时，其 <code>pos</code> 属性是最接近坐标的位置，其 <code>inside</code> 属性保存位置所在的内部节点的位置，如果在顶层而不在任何节点中，则为 -1。",
    "_note": ""
  },
  "Returns the viewport rectangle at a given document position. left and right will be the same number, as this returns a flat cursor-ish rectangle. If the position is between two things that aren't directly adjacent, side determines which element is used. When < 0, the element before the position is used, otherwise the element after.": {
    "_translate": "返回给定文档位置的视口矩形。\n<code>left</code> 和 <code>right</code> 将是相同的数字，因为这返回一个\n扁平的光标状矩形。如果位置在两个不直接相邻的事物之间，\n<code>side</code> 决定使用哪个元素。当 &lt; 0 时，使用位置之前的元素，\n否则使用之后的元素。",
    "_note": ""
  },
  "Note that you should not mutate the editor's internal DOM, only inspect it (and even that is usually not necessary).": {
    "_translate": "请注意，您<strong>不应</strong>更改编辑器的内部DOM，只需检查它（即使这样通常也没有必要）。",
    "_note": ""
  },
  "Find the DOM position that corresponds to the given document position. When side is negative, find the position as close as possible to the content before the position. When positive, prefer positions close to the content after the position. When zero, prefer as shallow a position as possible.": {
    "_translate": "找到与给定文档位置相对应的DOM位置。当<code>side</code>为负数时，找到尽可能接近位置之前内容的位置。当为正数时，优先选择接近位置之后内容的位置。当为零时，优先选择尽可能浅的位置。",
    "_note": ""
  },
  "Find the DOM node that represents the document node after the given position. May return null when the position doesn't point in front of a node or if the node is inside an opaque node view.": {
    "_translate": "找到表示给定位置之后的文档节点的DOM节点。如果位置不在节点前面或节点位于不透明节点视图内，则可能返回<code>null</code>。",
    "_note": ""
  },
  "This is intended to be able to call things like getBoundingClientRect on that DOM node. Do not mutate the editor DOM directly, or add styling this way, since that will be immediately overriden by the editor as it redraws the node.": {
    "_translate": "这是为了能够在该DOM节点上调用类似<code>getBoundingClientRect</code>的东西。<strong>不要</strong>直接修改编辑器DOM，或以这种方式添加样式，因为编辑器在重绘节点时会立即覆盖这些更改。",
    "_note": ""
  },
  "Find the document position that corresponds to a given DOM position. (Whenever possible, it is preferable to inspect the document structure directly, rather than poking around in the DOM, but sometimes—for example when interpreting an event target—you don't have a choice.)": {
    "_translate": "找到与给定DOM位置相对应的文档位置。（在可能的情况下，最好直接检查文档结构，而不是在DOM中四处查找，但有时——例如在解释事件目标时——你别无选择。）",
    "_note": ""
  },
  "The bias parameter can be used to influence which side of a DOM node to use when the position is inside a leaf node.": {
    "_translate": "<code>bias</code> 参数可用于影响在位置位于叶节点内时使用 DOM 节点的哪一侧。",
    "_note": ""
  },
  "Find out whether the selection is at the end of a textblock when moving in a given direction. When, for example, given \"left\", it will return true if moving left from the current cursor position would leave that position's parent textblock. Will apply to the view's current state by default, but it is possible to pass a different state.": {
    "_translate": "找出在给定方向移动时选择是否在文本块的末尾。例如，给定<code>\"left\"</code>，如果从当前光标位置向左移动会离开该位置的父文本块，则返回true。默认情况下将应用于视图的当前状态，但也可以传递不同的状态。",
    "_note": ""
  },
  "Run the editor's paste logic with the given HTML string. The event, if given, will be passed to the handlePaste hook.": {
    "_translate": "运行编辑器的粘贴逻辑与给定的HTML字符串。 如果给定，<code>event</code> 将被传递到 <a href=\"#view.EditorProps.handlePaste\"><code>handlePaste</code></a> 钩子。",
    "_note": ""
  },
  "Run the editor's paste logic with the given plain-text input.": {
    "_translate": "运行编辑器的粘贴逻辑与给定的纯文本输入。",
    "_note": ""
  },
  "Removes the editor from the DOM and destroys all node views.": {
    "_translate": "将编辑器从DOM中移除并销毁所有<a href=\"#view.NodeView\">节点视图</a>。",
    "_note": ""
  },
  "This is true when the view has been destroyed (and thus should not be used anymore).": {
    "_translate": "这是真的，当视图已经\n<a href=\"#view.EditorView.destroy\">销毁</a>（因此不应再使用）。",
    "_note": ""
  },
  "Used for testing.": {
    "_translate": "用于测试。",
    "_note": ""
  },
  "Dispatch a transaction. Will call dispatchTransaction when given, and otherwise defaults to applying the transaction to the current state and calling updateState with the result. This method is bound to the view instance, so that it can be easily passed around.": {
    "_translate": "调度事务。将调用\n<a href=\"#view.DirectEditorProps.dispatchTransaction\"><code>dispatchTransaction</code></a>\n（如果提供），否则默认将事务应用于当前状态并调用\n<a href=\"#view.EditorView.updateState\"><code>updateState</code></a> 处理结果。\n此方法绑定到视图实例，因此可以轻松传递。",
    "_note": ""
  },
  "Props are configuration values that can be passed to an editor view or included in a plugin. This interface lists the supported props.": {
    "_translate": "道具是可以传递给编辑器视图或包含在插件中的配置值。此接口列出了支持的道具。",
    "_note": ""
  },
  "The various event-handling functions may all return true to indicate that they handled the given event. The view will then take care to call preventDefault on the event, except with handleDOMEvents, where the handler itself is responsible for that.": {
    "_translate": "各种事件处理函数都可以返回<code>true</code>以表示它们处理了给定的事件。然后视图将负责在事件上调用<code>preventDefault</code>，除了<code>handleDOMEvents</code>，在这种情况下处理程序本身负责这一点。",
    "_note": ""
  },
  "How a prop is resolved depends on the prop. Handler functions are called one at a time, starting with the base props and then searching through the plugins (in order of appearance) until one of them returns true. For some props, the first plugin that yields a value gets precedence.": {
    "_translate": "道具的解析方式取决于道具。处理函数一次调用一个，从基本道具开始，然后按出现顺序搜索插件，直到其中一个返回true。对于某些道具，第一个产生值的插件优先。",
    "_note": ""
  },
  "The optional type parameter refers to the type of this in prop functions, and is used to pass in the plugin type when defining a plugin.": {
    "_translate": "可选类型参数指的是 prop 函数中 <code>this</code> 的类型，并在定义<a href=\"#state.Plugin\">插件</a>时用于传入插件类型。",
    "_note": ""
  },
  "Can be an object mapping DOM event type names to functions that handle them. Such functions will be called before any handling ProseMirror does of events fired on the editable DOM element. Contrary to the other event handling props, when returning true from such a function, you are responsible for calling preventDefault yourself (or not, if you want to allow the default behavior).": {
    "_translate": "可以是一个将 DOM 事件类型名称映射到处理它们的函数的对象。在 ProseMirror 处理在可编辑 DOM 元素上触发的事件之前，将调用这些函数。与其他事件处理属性相反，当从这样的函数返回 true 时，您有责任自己调用 <code>preventDefault</code>（如果您想允许默认行为，则不需要调用）。",
    "_note": ""
  },
  "Called when the editor receives a keydown event.": {
    "_translate": "当编辑器收到<code>keydown</code>事件时调用。",
    "_note": ""
  },
  "Handler for keypress events.": {
    "_translate": "<code>keypress</code>事件的处理程序。",
    "_note": ""
  },
  "Whenever the user directly input text, this handler is called before the input is applied. If it returns true, the default behavior of actually inserting the text is suppressed.": {
    "_translate": "每当用户直接输入文本时，会调用此处理程序，然后才应用输入。如果它返回<code>true</code>，则实际插入文本的默认行为将被抑制。",
    "_note": ""
  },
  "Called for each node around a click, from the inside out. The direct flag will be true for the inner node.": {
    "_translate": "在点击周围的每个节点调用，从内到外。<code>direct</code> 标志对于内部节点将为真。",
    "_note": ""
  },
  "Called for each node around a double click.": {
    "_translate": "在双击时调用每个节点。",
    "_note": ""
  },
  "Called when the editor is clicked, after handleClickOn handlers have been called.": {
    "_translate": "在调用<code>handleClickOn</code>处理程序之后，单击编辑器时调用。",
    "_note": ""
  },
  "Called when the editor is double-clicked, after handleDoubleClickOn.": {
    "_translate": "在<code>handleDoubleClickOn</code>之后双击编辑器时调用。",
    "_note": ""
  },
  "Called for each node around a triple click.": {
    "_translate": "在三次点击周围的每个节点调用。",
    "_note": ""
  },
  "Called when the editor is triple-clicked, after handleTripleClickOn.": {
    "_translate": "在<code>handleTripleClickOn</code>之后，当编辑器被三击时调用。",
    "_note": ""
  },
  "Can be used to override the behavior of pasting. slice is the pasted content parsed by the editor, but you can directly access the event to get at the raw content.": {
    "_translate": "可以用来覆盖粘贴的行为。<code>slice</code>是编辑器解析的粘贴内容，但你可以直接访问事件以获取原始内容。",
    "_note": ""
  },
  "Called when something is dropped on the editor. moved will be true if this drop moves from the current selection (which should thus be deleted).": {
    "_translate": "当某些内容被拖放到编辑器时调用。如果此拖放从当前选择中移动（因此应删除），则<code>moved</code>将为true。",
    "_note": ""
  },
  "Called when the view, after updating its state, tries to scroll the selection into view. A handler function may return false to indicate that it did not handle the scrolling and further handlers or the default behavior should be tried.": {
    "_translate": "在视图更新其状态后尝试将选区滚动到视图中时调用。处理函数可以返回 false 以表示它没有处理滚动，并且应该尝试进一步的处理程序或默认行为。",
    "_note": ""
  },
  "Can be used to override the way a selection is created when reading a DOM selection between the given anchor and head.": {
    "_translate": "可用于覆盖在读取给定锚点和头部之间的DOM选择时创建选择的方式。",
    "_note": ""
  },
  "The parser to use when reading editor changes from the DOM. Defaults to calling DOMParser.fromSchema on the editor's schema.": {
    "_translate": "用于从 DOM 读取编辑器更改的 <a href=\"#model.DOMParser\">解析器</a>。默认情况下调用编辑器模式上的 <a href=\"#model.DOMParser%5EfromSchema\"><code>DOMParser.fromSchema</code></a>。",
    "_note": ""
  },
  "Can be used to transform pasted HTML text, before it is parsed, for example to clean it up.": {
    "_translate": "可用于在解析之前转换粘贴的HTML文本，例如进行清理。",
    "_note": ""
  },
  "The parser to use when reading content from the clipboard. When not given, the value of the domParser prop is used.": {
    "_translate": "从剪贴板读取内容时使用的<a href=\"#model.DOMParser\">解析器</a>。如果未提供，则使用<a href=\"#view.EditorProps.domParser\"><code>domParser</code></a>属性的值。",
    "_note": ""
  },
  "Transform pasted plain text. The plain flag will be true when the text is pasted as plain text.": {
    "_translate": "将粘贴的纯文本转换。<code>plain</code> 标志在文本作为纯文本粘贴时为 true。",
    "_note": ""
  },
  "A function to parse text from the clipboard into a document slice. Called after transformPastedText. The default behavior is to split the text into lines, wrap them in <p> tags, and call clipboardParser on it. The plain flag will be true when the text is pasted as plain text.": {
    "_translate": "一个将剪贴板中的文本解析为文档切片的函数。在<a href=\"#view.EditorProps.transformPastedText\"><code>transformPastedText</code></a>之后调用。默认行为是将文本拆分为行，用<code>&lt;p&gt;</code>标签包裹它们，并调用<a href=\"#view.EditorProps.clipboardParser\"><code>clipboardParser</code></a>。当文本作为纯文本粘贴时，<code>plain</code>标志将为真。",
    "_note": ""
  },
  "Can be used to transform pasted or dragged-and-dropped content before it is applied to the document.": {
    "_translate": "可用于在粘贴或拖放内容之前对其进行转换，然后再应用到文档中。",
    "_note": ""
  },
  "Can be used to transform copied or cut content before it is serialized to the clipboard.": {
    "_translate": "可用于在内容被序列化到剪贴板之前转换复制或剪切的内容。",
    "_note": ""
  },
  "decorations is an array of node or inline decorations that are active around the node. They are automatically drawn in the normal way, and you will usually just want to ignore this, but they can also be used as a way to provide context information to the node view without adding it to the document itself.": {
    "_translate": "<code>decorations</code> 是一个节点或内联装饰的数组，它们在节点周围处于活动状态。它们会以正常方式自动绘制，通常你只需忽略这一点，但它们也可以用作向节点视图提供上下文信息的一种方式，而无需将其添加到文档本身。",
    "_note": ""
  },
  "innerDecorations holds the decorations for the node's content. You can safely ignore this if your view has no content or a contentDOM property, since the editor will draw the decorations on the content. But if you, for example, want to create a nested editor with the content, it may make sense to provide it with the inner decorations.": {
    "_translate": "<code>innerDecorations</code> 保存节点内容的装饰。\n如果你的视图没有内容或没有 <code>contentDOM</code> 属性，你可以放心地忽略它，因为编辑器会在内容上绘制装饰。但如果你想创建一个带有内容的嵌套编辑器，例如，提供内部装饰可能是有意义的。",
    "_note": ""
  },
  "Allows you to pass custom rendering and behavior logic for nodes. Should map node names to constructor functions that produce a NodeView object implementing the node's display behavior. The third argument getPos is a function that can be called to get the node's current position, which can be useful when creating transactions to update it. Note that if the node is not in the document, the position returned by this function will be undefined.": {
    "_translate": "允许您为节点传递自定义渲染和行为逻辑。应将节点名称映射到生成实现节点显示行为的<a href=\"#view.NodeView\"><code>NodeView</code></a>对象的构造函数。第三个参数<code>getPos</code>是一个可以调用以获取节点当前位置的函数，这在创建事务以更新节点时非常有用。请注意，如果节点不在文档中，此函数返回的位置将是<code>undefined</code>。",
    "_note": ""
  },
  "(For backwards compatibility reasons, mark views can also be included in this object.)": {
    "_translate": "(出于向后兼容性的原因，<a href=\"#view.EditorProps.markViews\">标记视图</a>也可以包含在此对象中。)",
    "_note": ""
  },
  "Pass custom mark rendering functions. Note that these cannot provide the kind of dynamic behavior that node views can—they just provide custom rendering logic. The third argument indicates whether the mark's content is inline.": {
    "_translate": "传递自定义标记渲染函数。请注意，这些不能提供<a href=\"#view.NodeView\">节点视图</a>可以提供的那种动态行为——它们只是提供自定义渲染逻辑。第三个参数表示标记的内容是否为内联。",
    "_note": ""
  },
  "The DOM serializer to use when putting content onto the clipboard. If not given, the result of DOMSerializer.fromSchema will be used. This object will only have its serializeFragment method called, and you may provide an alternative object type implementing a compatible method.": {
    "_translate": "用于将内容放入剪贴板的DOM序列化器。如果未提供，将使用\n<a href=\"#model.DOMSerializer%5EfromSchema\"><code>DOMSerializer.fromSchema</code></a>\n的结果。此对象将仅调用其\n<a href=\"#model.DOMSerializer.serializeFragment\"><code>serializeFragment</code></a>\n方法，您可以提供实现兼容方法的替代对象类型。",
    "_note": ""
  },
  "A function that will be called to get the text for the current selection when copying text to the clipboard. By default, the editor will use textBetween on the selected range.": {
    "_translate": "一个将在将文本复制到剪贴板时被调用以获取当前选择文本的函数。默认情况下，编辑器将在选定范围内使用<a href=\"#model.Node.textBetween\"><code>textBetween</code></a>。",
    "_note": ""
  },
  "A set of document decorations to show in the view.": {
    "_translate": "一组<a href=\"#view.Decoration\">文档装饰</a>以显示在视图中。",
    "_note": ""
  },
  "When this returns false, the content of the view is not directly editable.": {
    "_translate": "当此返回 false 时，视图的内容不可直接编辑。",
    "_note": ""
  },
  "Control the DOM attributes of the editable element. May be either an object or a function going from an editor state to an object. By default, the element will get a class \"ProseMirror\", and will have its contentEditable attribute determined by the editable prop. Additional classes provided here will be added to the class. For other attributes, the value provided first (as in someProp) will be used.": {
    "_translate": "控制可编辑元素的DOM属性。可以是一个对象或一个从编辑器状态到对象的函数。默认情况下，元素将获得一个类<code>\"ProseMirror\"</code>，并且其<code>contentEditable</code>属性将由<a href=\"#view.EditorProps.editable\"><code>editable</code> prop</a>确定。这里提供的附加类将被添加到类中。对于其他属性，将使用首先提供的值（如<a href=\"#view.EditorView.someProp\"><code>someProp</code></a>）。",
    "_note": ""
  },
  "Determines the distance (in pixels) between the cursor and the end of the visible viewport at which point, when scrolling the cursor into view, scrolling takes place. Defaults to 0.": {
    "_translate": "确定光标与可见视口末端之间的距离（以像素为单位），在将光标滚动到视图中时，滚动发生的点。默认为 0。",
    "_note": ""
  },
  "Determines the extra space (in pixels) that is left above or below the cursor when it is scrolled into view. Defaults to 5.": {
    "_translate": "确定当光标滚动到视图中时在光标上方或下方留下的额外空间（以像素为单位）。默认值为 5。",
    "_note": ""
  },
  "The type of function provided to create node views.": {
    "_translate": "提供用于创建<a href=\"#view.NodeView\">节点视图</a>的<a href=\"#view.EditorProps.nodeViews\">函数类型</a>。",
    "_note": ""
  },
  "The function types used to create mark views.": {
    "_translate": "函数类型<a href=\"#view.EditorProps.markViews\">用于</a>创建标记视图。",
    "_note": ""
  },
  "The props object given directly to the editor view supports some fields that can't be used in plugins:": {
    "_translate": "直接提供给编辑器视图的props对象支持一些不能在插件中使用的字段：",
    "_note": ""
  },
  "The current state of the editor.": {
    "_translate": "编辑器的当前状态。",
    "_note": ""
  },
  "A set of plugins to use in the view, applying their plugin view and props. Passing plugins with a state component (a state field field or a transaction filter or appender) will result in an error, since such plugins must be present in the state to work.": {
    "_translate": "一组在视图中使用的插件，应用它们的<a href=\"#state.PluginSpec.view\">插件视图</a>和<a href=\"#state.PluginSpec.props\">属性</a>。传递带有状态组件（<a href=\"#state.PluginSpec.state\">状态字段</a>或<a href=\"#state.PluginSpec.filterTransaction\">事务</a>过滤器或附加器）的插件将导致错误，因为此类插件必须存在于状态中才能工作。",
    "_note": ""
  },
  "The callback over which to send transactions (state updates) produced by the view. If you specify this, you probably want to make sure this ends up calling the view's updateState method with a new state that has the transaction applied. The callback will be bound to have the view instance as its this binding.": {
    "_translate": "用于发送由视图生成的事务（状态更新）的回调。如果你指定了这个，你可能想确保这最终会调用视图的<a href=\"#view.EditorView.updateState\"><code>updateState</code></a>方法，并使用应用了事务的新状态。回调将绑定视图实例作为其<code>this</code>绑定。",
    "_note": ""
  },
  "By default, document nodes are rendered using the result of the toDOM method of their spec, and managed entirely by the editor. For some use cases, such as embedded node-specific editing interfaces, you want more control over the behavior of a node's in-editor representation, and need to define a custom node view.": {
    "_translate": "默认情况下，文档节点使用其规范的<a href=\"#model.NodeSpec.toDOM\"><code>toDOM</code></a>方法的结果进行渲染，并由编辑器完全管理。对于某些用例，例如嵌入节点特定的编辑界面，您希望对节点在编辑器中的表示行为有更多控制，并需要<a href=\"#view.EditorProps.nodeViews\">定义</a>自定义节点视图。",
    "_note": ""
  },
  "Mark views only support dom and contentDOM, and don't support any of the node view methods.": {
    "_translate": "Mark 视图仅支持 <code>dom</code> 和 <code>contentDOM</code>，不支持任何节点视图方法。",
    "_note": ""
  },
  "Objects returned as node views must conform to this interface.": {
    "_translate": "对象作为节点视图返回时必须符合此接口。",
    "_note": ""
  },
  "The outer DOM node that represents the document node.": {
    "_translate": "表示文档节点的外部DOM节点。",
    "_note": ""
  },
  "The DOM node that should hold the node's content. Only meaningful if the node view also defines a dom property and if its node type is not a leaf node type. When this is present, ProseMirror will take care of rendering the node's children into it. When it is not present, the node view itself is responsible for rendering (or deciding not to render) its child nodes.": {
    "_translate": "应该包含节点内容的DOM节点。只有在节点视图也定义了<code>dom</code>属性并且其节点类型不是叶节点类型时才有意义。当存在此属性时，ProseMirror将负责将节点的子节点渲染到其中。当不存在此属性时，节点视图本身负责渲染（或决定不渲染）其子节点。",
    "_note": ""
  },
  "Can be used to override the way the node's selected status (as a node selection) is displayed.": {
    "_translate": "可用于覆盖节点的选定状态（作为节点选择）的显示方式。",
    "_note": ""
  },
  "When given, this will be called when the view is updating itself. It will be given a node (possibly of a different type), an array of active decorations around the node (which are automatically drawn, and the node view may ignore if it isn't interested in them), and a decoration source that represents any decorations that apply to the content of the node (which again may be ignored). It should return true if it was able to update to that node, and false otherwise. If the node view has a contentDOM property (or no dom property), updating its child nodes will be handled by ProseMirror.": {
    "_translate": "当提供时，这将在视图更新自身时被调用。它将被赋予一个节点（可能是不同类型的），一个围绕节点的活动装饰数组（这些装饰会自动绘制，如果节点视图对它们不感兴趣，可以忽略），以及一个<a href=\"#view.DecorationSource\">装饰源</a>，代表适用于节点内容的任何装饰（同样可以忽略）。如果能够更新到该节点，它应返回true，否则返回false。如果节点视图有一个<code>contentDOM</code>属性（或没有<code>dom</code>属性），其子节点的更新将由ProseMirror处理。",
    "_note": ""
  },
  "When defining a selectNode method, you should also provide a deselectNode method to remove the effect again.": {
    "_translate": "在定义<code>selectNode</code>方法时，你还应该提供一个<code>deselectNode</code>方法来再次移除效果。",
    "_note": ""
  },
  "This will be called to handle setting the selection inside the node. The anchor and head positions are relative to the start of the node. By default, a DOM selection will be created between the DOM positions corresponding to those positions, but if you override it you can do something else.": {
    "_translate": "这将被调用来处理在节点内设置选择。<code>anchor</code> 和 <code>head</code> 位置是相对于节点的起始位置。默认情况下，将在对应于这些位置的 DOM 位置之间创建一个 DOM 选择，但如果你重写它，你可以做其他事情。",
    "_note": ""
  },
  "Can be used to prevent the editor view from trying to handle some or all DOM events that bubble up from the node view. Events for which this returns true are not handled by the editor.": {
    "_translate": "可用于防止编辑器视图尝试处理从节点视图冒泡的一些或所有DOM事件。对于此返回true的事件，编辑器不会处理。",
    "_note": ""
  },
  "Called when a DOM mutation or a selection change happens within the view. When the change is a selection change, the record will have a type property of \"selection\" (which doesn't occur for native mutation records). Return false if the editor should re-read the selection or re-parse the range around the mutation, true if it can safely be ignored.": {
    "_translate": "在视图中发生DOM <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\">变动</a>或选择更改时调用。当更改是选择更改时，记录将具有<code>type</code>属性<code>\"selection\"</code>（这不会出现在本机变动记录中）。如果编辑器应该重新读取选择或重新解析变动周围的范围，则返回false；如果可以安全忽略，则返回true。",
    "_note": ""
  },
  "Called when the node view is removed from the editor or the whole editor is destroyed. (Not available for marks.)": {
    "_translate": "在节点视图从编辑器中移除或整个编辑器被销毁时调用。（不适用于标记。）",
    "_note": ""
  },
  "Helper type that maps event names to event object types, but includes events that TypeScript's HTMLElementEventMap doesn't know about.": {
    "_translate": "帮助器类型将事件名称映射到事件对象类型，但包括 TypeScript 的 HTMLElementEventMap 不知道的事件。",
    "_note": ""
  },
  "Decorations make it possible to influence the way the document is drawn, without actually changing the document.": {
    "_translate": "装饰使得可以在不实际更改文档的情况下影响文档的绘制方式。",
    "_note": ""
  },
  "Decoration objects can be provided to the view through the decorations prop. They come in several variants—see the static members of this class for details.": {
    "_translate": "装饰对象可以通过<a href=\"#view.EditorProps.decorations\"><code>decorations</code> prop</a>提供给视图。它们有几种变体——详情请参见此类的静态成员。",
    "_note": ""
  },
  "The start position of the decoration.": {
    "_translate": "装饰的起始位置。",
    "_note": ""
  },
  "The end position. Will be the same as from for widget decorations.": {
    "_translate": "结束位置。将与<a href=\"#view.Decoration%5Ewidget\">小部件装饰</a>的<code>from</code>相同。",
    "_note": ""
  },
  "The spec provided when creating this decoration. Can be useful if you've stored extra information in that object.": {
    "_translate": "创建此装饰时提供的规范。如果您在该对象中存储了额外的信息，则可能有用。",
    "_note": ""
  },
  "Creates a widget decoration, which is a DOM node that's shown in the document at the given position. It is recommended that you delay rendering the widget by passing a function that will be called when the widget is actually drawn in a view, but you can also directly pass a DOM node. getPos can be used to find the widget's current document position.": {
    "_translate": "创建一个小部件装饰，这是一个在文档中显示在给定位置的DOM节点。建议您通过传递一个函数来延迟渲染小部件，该函数将在小部件实际绘制在视图中时被调用，但您也可以直接传递一个DOM节点。<code>getPos</code>可用于查找小部件当前的文档位置。",
    "_note": ""
  },
  "Controls which side of the document position this widget is associated with. When negative, it is drawn before a cursor at its position, and content inserted at that position ends up after the widget. When zero (the default) or positive, the widget is drawn after the cursor and content inserted there ends up before the widget.": {
    "_translate": "控制此小部件与文档位置关联的哪一侧。当为负数时，它会在光标之前绘制，并且插入在该位置的内容会出现在小部件之后。当为零（默认）或正数时，小部件会在光标之后绘制，并且插入在该位置的内容会出现在小部件之前。",
    "_note": ""
  },
  "When there are multiple widgets at a given position, their side values determine the order in which they appear. Those with lower values appear first. The ordering of widgets with the same side value is unspecified.": {
    "_translate": "当在给定位置有多个小部件时，它们的<code>side</code>值决定了它们出现的顺序。值较低的先出现。具有相同<code>side</code>值的小部件的顺序未指定。",
    "_note": ""
  },
  "When marks is null, side also determines the marks that the widget is wrapped in—those of the node before when negative, those of the node after when positive.": {
    "_translate": "当 <code>marks</code> 为 null 时，<code>side</code> 也决定了小部件所包裹的标记——负数时为前一个节点的标记，正数时为后一个节点的标记。",
    "_note": ""
  },
  "The precise set of marks to draw around the widget.": {
    "_translate": "绘制在小部件周围的精确标记集。",
    "_note": ""
  },
  "Can be used to control which DOM events, when they bubble out of this widget, the editor view should ignore.": {
    "_translate": "可用于控制从此小部件冒泡出来的 DOM 事件，编辑器视图应忽略。",
    "_note": ""
  },
  "When set (defaults to false), selection changes inside the widget are ignored, and don't cause ProseMirror to try and re-sync the selection with its selection state.": {
    "_translate": "当设置为（默认为false）时，忽略小部件内的选择更改，并且不会导致ProseMirror尝试将选择与其选择状态重新同步。",
    "_note": ""
  },
  "Called when the widget decoration is removed or the editor is destroyed.": {
    "_translate": "在小部件装饰被移除或编辑器被销毁时调用。",
    "_note": ""
  },
  "When comparing decorations of this type (in order to decide whether it needs to be redrawn), ProseMirror will by default compare the widget DOM node by identity. If you pass a key, that key will be compared instead, which can be useful when you generate decorations on the fly and don't want to store and reuse DOM nodes. Make sure that any widgets with the same key are interchangeable—if widgets differ in, for example, the behavior of some event handler, they should get different keys.": {
    "_translate": "在比较这种类型的装饰（以决定是否需要重新绘制）时，ProseMirror 默认会通过身份比较小部件的 DOM 节点。如果你传递一个键，则会比较该键，这在你动态生成装饰且不想存储和重用 DOM 节点时非常有用。确保任何具有相同键的小部件是可互换的——如果小部件在某些事件处理程序的行为上有所不同，它们应该获得不同的键。",
    "_note": ""
  },
  "Specs allow arbitrary additional properties.": {
    "_translate": "规格允许任意附加属性。",
    "_note": ""
  },
  "Creates an inline decoration, which adds the given attributes to each inline node between from and to.": {
    "_translate": "创建一个内联装饰，它将给定的属性添加到<code>from</code>和<code>to</code>之间的每个内联节点。",
    "_note": ""
  },
  "Determines how the left side of the decoration is mapped when content is inserted directly at that position. By default, the decoration won't include the new content, but you can set this to true to make it inclusive.": {
    "_translate": "确定当内容直接插入到该位置时，装饰的左侧如何<a href=\"#transform.Position_Mapping\">映射</a>。默认情况下，装饰不会包含新内容，但您可以将其设置为<code>true</code>以使其包含。",
    "_note": ""
  },
  "Determines how the right side of the decoration is mapped. See inclusiveStart.": {
    "_translate": "确定装饰的右侧如何映射。\n请参阅\n<a href=\"#view.Decoration%5Einline%5Espec.inclusiveStart\"><code>inclusiveStart</code></a>。",
    "_note": ""
  },
  "Specs may have arbitrary additional properties.": {
    "_translate": "规格可能具有任意的附加属性。",
    "_note": ""
  },
  "Creates a node decoration. from and to should point precisely before and after a node in the document. That node, and only that node, will receive the given attributes.": {
    "_translate": "创建一个节点装饰。<code>from</code> 和 <code>to</code> 应该精确地指向文档中节点的前后。只有该节点将接收给定的属性。",
    "_note": ""
  },
  "A set of attributes to add to a decorated node. Most properties simply directly correspond to DOM attributes of the same name, which will be set to the property's value. These are exceptions:": {
    "_translate": "一组属性添加到装饰节点。大多数属性直接对应于同名的DOM属性，这些属性将被设置为属性的值。这些是例外：",
    "_note": ""
  },
  "When non-null, the target node is wrapped in a DOM element of this type (and the other attributes are applied to this element).": {
    "_translate": "当非空时，目标节点被包裹在这种类型的DOM元素中（其他属性应用于此元素）。",
    "_note": ""
  },
  "A CSS class name or a space-separated set of class names to be added to the classes that the node already had.": {
    "_translate": "一个 CSS 类名或一组用空格分隔的类名，将<em>添加</em>到节点已经拥有的类中。",
    "_note": ""
  },
  "A string of CSS to be added to the node's existing style property.": {
    "_translate": "一串要<em>添加</em>到节点现有<code>style</code>属性的CSS。",
    "_note": ""
  },
  "Any other properties are treated as regular DOM attributes.": {
    "_translate": "任何其他属性都被视为常规DOM属性。",
    "_note": ""
  },
  "A collection of decorations, organized in such a way that the drawing algorithm can efficiently use and compare them. This is a persistent data structure—it is not modified, updates create a new value.": {
    "_translate": "一组<a href=\"#view.Decoration\">装饰</a>，以一种绘图算法可以高效使用和比较的方式组织。 这是一个持久的数据结构——它不会被修改，更新会创建一个新值。",
    "_note": ""
  },
  "Map the set of decorations in response to a change in the document.": {
    "_translate": "将装饰集映射到文档更改的响应中。",
    "_note": ""
  },
  "Find all decorations in this set which touch the given range (including decorations that start or end directly at the boundaries) and match the given predicate on their spec. When start and end are omitted, all decorations in the set are considered. When predicate isn't given, all decorations are assumed to match.": {
    "_translate": "找到此集合中所有触及给定范围的装饰（包括直接在边界开始或结束的装饰）并且在其规格上匹配给定谓词的装饰。当省略<code>start</code>和<code>end</code>时，考虑集合中的所有装饰。当未给出<code>predicate</code>时，假定所有装饰都匹配。",
    "_note": ""
  },
  "When given, this function will be called for each decoration that gets dropped as a result of the mapping, passing the spec of that decoration.": {
    "_translate": "当提供此函数时，将为由于映射而被删除的每个装饰调用此函数，并传递该装饰的规格。",
    "_note": ""
  },
  "Add the given array of decorations to the ones in the set, producing a new set. Consumes the decorations array. Needs access to the current document to create the appropriate tree structure.": {
    "_translate": "将给定的装饰数组添加到集合中的装饰中，生成一个新的集合。消耗<code>decorations</code>数组。需要访问当前文档以创建适当的树结构。",
    "_note": ""
  },
  "Create a new set that contains the decorations in this set, minus the ones in the given array.": {
    "_translate": "创建一个新集合，其中包含此集合中的装饰，但不包括给定数组中的装饰。",
    "_note": ""
  },
  "Create a set of decorations, using the structure of the given document. This will consume (modify) the decorations array, so you must make a copy if you want need to preserve that.": {
    "_translate": "创建一组装饰，使用给定文档的结构。这将消耗（修改）<code>decorations</code>数组，因此如果需要保留它，必须制作一个副本。",
    "_note": ""
  },
  "The empty set of decorations.": {
    "_translate": "空的装饰集合。",
    "_note": ""
  },
  "An object that can provide decorations. Implemented by DecorationSet, and passed to node views.": {
    "_translate": "一个可以<a href=\"#view.EditorProps.decorations\">提供</a>装饰的对象。由<a href=\"#view.DecorationSet\"><code>DecorationSet</code></a>实现，并传递给<a href=\"#view.EditorProps.nodeViews\">节点视图</a>。",
    "_note": ""
  },
  "Extract a DecorationSource containing decorations for the given child node at the given offset.": {
    "_translate": "提取一个DecorationSource，其中包含给定偏移量处给定子节点的装饰。",
    "_note": ""
  },
  "Call the given function for each decoration set in the group.": {
    "_translate": "为组中的每个装饰集调用给定函数。",
    "_note": ""
  },
  "This module defines ProseMirror's content model, the data structures used to represent and work with documents.": {
    "_translate": "此模块定义了ProseMirror的内容模型，用于表示和处理文档的数据结构。",
    "_note": ""
  },
  "A ProseMirror document is a tree. At each level, a node describes the type of the content, and holds a fragment containing its children.": {
    "_translate": "ProseMirror 文档是一个树。在每个层级，一个<a href=\"#model.Node\">节点</a>描述内容的类型，并且包含一个包含其子节点的<a href=\"#model.Fragment\">片段</a>。",
    "_note": ""
  },
  "This class represents a node in the tree that makes up a ProseMirror document. So a document is an instance of Node, with children that are also instances of Node.": {
    "_translate": "这类表示构成ProseMirror文档的树中的一个节点。因此，文档是<code>Node</code>的一个实例，其子节点也是<code>Node</code>的实例。",
    "_note": ""
  },
  "Nodes are persistent data structures. Instead of changing them, you create new ones with the content you want. Old ones keep pointing at the old document shape. This is made cheaper by sharing structure between the old and new data as much as possible, which a tree shape like this (without back pointers) makes easy.": {
    "_translate": "节点是持久化的数据结构。你不会改变它们，而是创建包含所需内容的新节点。旧节点继续指向旧的文档结构。通过尽可能多地在旧数据和新数据之间共享结构，这样做的成本更低，而像这样的树形结构（没有后向指针）使这一点变得容易。",
    "_note": ""
  },
  "Do not directly mutate the properties of a Node object. See the guide for more information.": {
    "_translate": "<strong>不要</strong>直接修改<code>Node</code>对象的属性。请参阅\n<a href=\"/docs/guide/#doc\">指南</a>了解更多信息。",
    "_note": ""
  },
  "The type of node that this is.": {
    "_translate": "该节点的类型。",
    "_note": ""
  },
  "An object mapping attribute names to values. The kind of attributes allowed and required are determined by the node type.": {
    "_translate": "将属性名称映射到值的对象。允许和要求的属性种类由节点类型<a href=\"#model.NodeSpec.attrs\">确定</a>。",
    "_note": ""
  },
  "The marks (things like whether it is emphasized or part of a link) applied to this node.": {
    "_translate": "标记（例如是否强调或作为链接的一部分）应用于此节点。",
    "_note": ""
  },
  "A container holding the node's children.": {
    "_translate": "一个包含节点子节点的容器。",
    "_note": ""
  },
  "For text nodes, this contains the node's text content.": {
    "_translate": "For text nodes, this contains the node's text content.",
    "_note": ""
  },
  "The size of this node, as defined by the integer-based indexing scheme. For text nodes, this is the amount of characters. For other leaf nodes, it is one. For non-leaf nodes, it is the size of the content plus two (the start and end token).": {
    "_translate": "该节点的大小，由基于整数的<a href=\"/docs/guide/#doc.indexing\">索引方案</a>定义。对于文本节点，这是字符的数量。对于其他叶节点，它是一个。对于非叶节点，它是内容的大小加上两个（开始和结束标记）。",
    "_note": ""
  },
  "The number of children that the node has.": {
    "_translate": "节点拥有的子节点数量。",
    "_note": ""
  },
  "Get the child node at the given index. Raises an error when the index is out of range.": {
    "_translate": "获取给定索引处的子节点。当索引超出范围时引发错误。",
    "_note": ""
  },
  "Get the child node at the given index, if it exists.": {
    "_translate": "获取给定索引处的子节点（如果存在）。",
    "_note": ""
  },
  "Call f for every child node, passing the node, its offset into this parent node, and its index.": {
    "_translate": "为每个子节点调用<code>f</code>，传递节点、它在此父节点中的偏移量及其索引。",
    "_note": ""
  },
  "Call the given callback for every descendant node. Doesn't descend into a node when the callback returns false.": {
    "_translate": "为每个子节点调用给定的回调函数。当回调函数返回<code>false</code>时，不会深入到该节点。",
    "_note": ""
  },
  "Invoke a callback for all descendant nodes recursively between the given two positions that are relative to start of this node's content. The callback is invoked with the node, its position relative to the original node (method receiver), its parent node, and its child index. When the callback returns false for a given node, that node's children will not be recursed over. The last parameter can be used to specify a starting position to count from.": {
    "_translate": "在给定的两个相对于此节点内容起始位置之间递归地为所有后代节点调用回调函数。回调函数以节点、其相对于原始节点（方法接收者）的位置、其父节点及其子索引为参数。当回调函数对某个节点返回false时，该节点的子节点将不会被递归。最后一个参数可用于指定一个起始位置进行计数。",
    "_note": ""
  },
  "Concatenates all the text nodes found in this fragment and its children.": {
    "_translate": "将此片段及其子节点中找到的所有文本节点连接起来。",
    "_note": ""
  },
  "Get all text between positions from and to. When blockSeparator is given, it will be inserted to separate text from different block nodes. If leafText is given, it'll be inserted for every non-text leaf node encountered, otherwise leafText will be used.": {
    "_translate": "获取位置<code>from</code>和<code>to</code>之间的所有文本。当提供<code>blockSeparator</code>时，它将被插入以分隔来自不同块节点的文本。如果提供了<code>leafText</code>，它将被插入到遇到的每个非文本叶节点中，否则将使用<a href=\"#model.NodeSpec%5EleafText\"><code>leafText</code></a>。",
    "_note": ""
  },
  "Returns this node's first child, or null if there are no children.": {
    "_translate": "返回此节点的第一个子节点，如果没有子节点则返回<code>null</code>。",
    "_note": ""
  },
  "Returns this node's last child, or null if there are no children.": {
    "_translate": "返回此节点的最后一个子节点，如果没有子节点则返回<code>null</code>。",
    "_note": ""
  },
  "Test whether two nodes represent the same piece of document.": {
    "_translate": "测试两个节点是否代表同一份文档。",
    "_note": ""
  },
  "Compare the markup (type, attributes, and marks) of this node to those of another. Returns true if both have the same markup.": {
    "_translate": "比较此节点的标记（类型、属性和标记）与另一个节点的标记。如果两者具有相同的标记，则返回<code>true</code>。",
    "_note": ""
  },
  "Check whether this node's markup correspond to the given type, attributes, and marks.": {
    "_translate": "检查此节点的标记是否对应于给定的类型、属性和标记。",
    "_note": ""
  },
  "Create a new node with the same markup as this node, containing the given content (or empty, if no content is given).": {
    "_translate": "创建一个具有与此节点相同标记的新节点，包含给定的内容（如果没有给定内容，则为空）。",
    "_note": ""
  },
  "Create a copy of this node, with the given set of marks instead of the node's own marks.": {
    "_translate": "创建此节点的副本，并使用给定的标记集代替节点自己的标记。",
    "_note": ""
  },
  "Create a copy of this node with only the content between the given positions. If to is not given, it defaults to the end of the node.": {
    "_translate": "创建此节点的副本，仅包含给定位置之间的内容。如果未给出<code>to</code>，则默认为节点的末尾。",
    "_note": ""
  },
  "Cut out the part of the document between the given positions, and return it as a Slice object.": {
    "_translate": "从给定位置之间的文档中剪切出部分，并将其作为<code>Slice</code>对象返回。",
    "_note": ""
  },
  "Replace the part of the document between the given positions with the given slice. The slice must 'fit', meaning its open sides must be able to connect to the surrounding content, and its content nodes must be valid children for the node they are placed into. If any of this is violated, an error of type ReplaceError is thrown.": {
    "_translate": "将文档中给定位置之间的部分替换为给定的片段。片段必须“适合”，这意味着它的开放边必须能够连接到周围的内容，并且它的内容节点必须是它们所在节点的有效子节点。如果违反了其中任何一项，将抛出类型为<a href=\"#model.ReplaceError\"><code>ReplaceError</code></a>的错误。",
    "_note": ""
  },
  "Find the node directly after the given position.": {
    "_translate": "找到给定位置之后的节点。",
    "_note": ""
  },
  "Find the (direct) child node after the given offset, if any, and return it along with its index and offset relative to this node.": {
    "_translate": "找到给定偏移量后的（直接）子节点（如果有），并将其与相对于此节点的索引和偏移量一起返回。",
    "_note": ""
  },
  "Find the (direct) child node before the given offset, if any, and return it along with its index and offset relative to this node.": {
    "_translate": "在给定偏移量之前找到（直接）子节点（如果有），并返回它以及相对于此节点的索引和偏移量。",
    "_note": ""
  },
  "Test whether a given mark or mark type occurs in this document between the two given positions.": {
    "_translate": "测试在此文档中给定的标记或标记类型是否出现在两个给定位置之间。",
    "_note": ""
  },
  "Resolve the given position in the document, returning an object with information about its context.": {
    "_translate": "解析文档中的给定位置，返回一个包含其上下文信息的<a href=\"#model.ResolvedPos\">对象</a>。",
    "_note": ""
  },
  "True when this is a block (non-inline node)": {
    "_translate": "当这是一个块（非内联节点）时为真",
    "_note": ""
  },
  "True when this is a textblock node, a block node with inline content.": {
    "_translate": "True when this is a textblock node, a block node with inline content.",
    "_note": ""
  },
  "True when this node allows inline content.": {
    "_translate": "当此节点允许内联内容时为真。",
    "_note": ""
  },
  "True when this is an inline node (a text node or a node that can appear among text).": {
    "_translate": "True when this is an inline node (a text node or a node that can appear among text).",
    "_note": ""
  },
  "True when this is a text node.": {
    "_translate": "True when this is a text node.",
    "_note": ""
  },
  "True when this is a leaf node.": {
    "_translate": "当这是一个叶节点时为真。",
    "_note": ""
  },
  "True when this is an atom, i.e. when it does not have directly editable content. This is usually the same as isLeaf, but can be configured with the atom property on a node's spec (typically used when the node is displayed as an uneditable node view).": {
    "_translate": "当这是一个原子时为真，即当它没有直接可编辑的内容时。这通常与<code>isLeaf</code>相同，但可以通过节点规范中的<a href=\"#model.NodeSpec.atom\"><code>atom</code>属性</a>进行配置（通常在节点显示为不可编辑的<a href=\"#view.NodeView\">节点视图</a>时使用）。",
    "_note": ""
  },
  "Return a string representation of this node for debugging purposes.": {
    "_translate": "返回此节点的字符串表示以进行调试。",
    "_note": ""
  },
  "Get the content match in this node at the given index.": {
    "_translate": "在给定索引处获取此节点中的内容匹配。",
    "_note": ""
  },
  "Test whether replacing the range between from and to (by child index) with the given replacement fragment (which defaults to the empty fragment) would leave the node's content valid. You can optionally pass start and end indices into the replacement fragment.": {
    "_translate": "测试在节点的内容是否有效的情况下，用给定的替换片段（默认为空片段）替换<code>from</code>和<code>to</code>之间的范围（通过子索引）。您可以选择传递<code>start</code>和<code>end</code>索引到替换片段。",
    "_note": ""
  },
  "Test whether replacing the range from to to (by index) with a node of the given type would leave the node's content valid.": {
    "_translate": "测试将范围<code>from</code>到<code>to</code>（按索引）替换为给定类型的节点是否会使节点的内容保持有效。",
    "_note": ""
  },
  "Test whether the given node's content could be appended to this node. If that node is empty, this will only return true if there is at least one node type that can appear in both nodes (to avoid merging completely incompatible nodes).": {
    "_translate": "测试给定节点的内容是否可以附加到此节点。如果该节点为空，则只有在至少有一个节点类型可以出现在两个节点中时才会返回 true（以避免合并完全不兼容的节点）。",
    "_note": ""
  },
  "Check whether this node and its descendants conform to the schema, and raise an exception when they do not.": {
    "_translate": "检查此节点及其后代是否符合架构，如果不符合则引发异常。",
    "_note": ""
  },
  "Return a JSON-serializeable representation of this node.": {
    "_translate": "返回此节点的 JSON 可序列化表示。",
    "_note": ""
  },
  "Deserialize a node from its JSON representation.": {
    "_translate": "从其JSON表示中反序列化一个节点。",
    "_note": ""
  },
  "A fragment represents a node's collection of child nodes.": {
    "_translate": "一个片段表示一个节点的子节点集合。",
    "_note": ""
  },
  "Like nodes, fragments are persistent data structures, and you should not mutate them or their content. Rather, you create new instances whenever needed. The API tries to make this easy.": {
    "_translate": "像节点一样，片段是持久性数据结构，你不应该改变它们或它们的内容。相反，你应该在需要时创建新的实例。API 尝试使这变得容易。",
    "_note": ""
  },
  "The size of the fragment, which is the total of the size of its content nodes.": {
    "_translate": "片段的大小，即其内容节点的总大小。",
    "_note": ""
  },
  "Invoke a callback for all descendant nodes between the given two positions (relative to start of this fragment). Doesn't descend into a node when the callback returns false.": {
    "_translate": "为给定的两个位置之间的所有子节点调用回调（相对于此片段的起始位置）。当回调返回<code>false</code>时，不会深入节点。",
    "_note": ""
  },
  "Call the given callback for every descendant node. pos will be relative to the start of the fragment. The callback may return false to prevent traversal of a given node's children.": {
    "_translate": "为每个子节点调用给定的回调函数。<code>pos</code>将相对于片段的起始位置。回调函数可以返回<code>false</code>以阻止遍历给定节点的子节点。",
    "_note": ""
  },
  "Extract the text between from and to. See the same method on Node.": {
    "_translate": "提取<code>from</code>和<code>to</code>之间的文本。请参阅<a href=\"#model.Node.textBetween\"><code>Node</code></a>上的相同方法。",
    "_note": ""
  },
  "Create a new fragment containing the combined content of this fragment and the other.": {
    "_translate": "创建一个包含此片段和其他片段的组合内容的新片段。",
    "_note": ""
  },
  "Cut out the sub-fragment between the two given positions.": {
    "_translate": "剪切出两个给定位置之间的子片段。",
    "_note": ""
  },
  "Create a new fragment in which the node at the given index is replaced by the given node.": {
    "_translate": "创建一个新的片段，其中给定索引处的节点被给定节点替换。",
    "_note": ""
  },
  "Create a new fragment by prepending the given node to this fragment.": {
    "_translate": "将给定节点添加到此片段的前面以创建一个新的片段。",
    "_note": ""
  },
  "Create a new fragment by appending the given node to this fragment.": {
    "_translate": "通过将给定节点附加到此片段来创建一个新片段。",
    "_note": ""
  },
  "Compare this fragment to another one.": {
    "_translate": "将此片段与另一个片段进行比较。",
    "_note": ""
  },
  "The first child of the fragment, or null if it is empty.": {
    "_translate": "片段的第一个子节点，如果为空则为<code>null</code>。",
    "_note": ""
  },
  "The last child of the fragment, or null if it is empty.": {
    "_translate": "片段的最后一个子节点，如果为空则为<code>null</code>。",
    "_note": ""
  },
  "The number of child nodes in this fragment.": {
    "_translate": "该片段中的子节点数量。",
    "_note": ""
  },
  "Get the child node at the given index. Raise an error when the index is out of range.": {
    "_translate": "获取给定索引处的子节点。当索引超出范围时引发错误。",
    "_note": ""
  },
  "Find the first position at which this fragment and another fragment differ, or null if they are the same.": {
    "_translate": "找到此片段与另一个片段不同的第一个位置，如果它们相同，则返回<code>null</code>。",
    "_note": ""
  },
  "Find the first position, searching from the end, at which this fragment and the given fragment differ, or null if they are the same. Since this position will not be the same in both nodes, an object with two separate positions is returned.": {
    "_translate": "找到从末尾开始搜索的第一个位置，在该位置此片段与给定片段不同，或者如果它们相同则返回<code>null</code>。由于此位置在两个节点中不会相同，因此返回一个具有两个独立位置的对象。",
    "_note": ""
  },
  "Return a debugging string that describes this fragment.": {
    "_translate": "返回描述此片段的调试字符串。",
    "_note": ""
  },
  "Create a JSON-serializeable representation of this fragment.": {
    "_translate": "创建一个可JSON序列化的表示这个片段的表示。",
    "_note": ""
  },
  "Deserialize a fragment from its JSON representation.": {
    "_translate": "从其JSON表示中反序列化片段。",
    "_note": ""
  },
  "Build a fragment from an array of nodes. Ensures that adjacent text nodes with the same marks are joined together.": {
    "_translate": "从节点数组构建一个片段。确保具有相同标记的相邻文本节点连接在一起。",
    "_note": ""
  },
  "Create a fragment from something that can be interpreted as a set of nodes. For null, it returns the empty fragment. For a fragment, the fragment itself. For a node or array of nodes, a fragment containing those nodes.": {
    "_translate": "从可以解释为一组节点的内容创建一个片段。对于<code>null</code>，返回空片段。对于一个片段，返回片段本身。对于一个节点或节点数组，返回包含这些节点的片段。",
    "_note": ""
  },
  "An empty fragment. Intended to be reused whenever a node doesn't contain anything (rather than allocating a new empty fragment for each leaf node).": {
    "_translate": "一个空片段。旨在在节点不包含任何内容时重复使用（而不是为每个叶节点分配一个新的空片段）。",
    "_note": ""
  },
  "A mark is a piece of information that can be attached to a node, such as it being emphasized, in code font, or a link. It has a type and optionally a set of attributes that provide further information (such as the target of the link). Marks are created through a Schema, which controls which types exist and which attributes they have.": {
    "_translate": "标记是一段可以附加到节点上的信息，例如它被强调、以代码字体显示或是一个链接。它有一个类型，并且可以选择性地包含一组提供进一步信息的属性（例如链接的目标）。标记是通过<code>Schema</code>创建的，<code>Schema</code>控制存在的类型及其属性。",
    "_note": ""
  },
  "The type of this mark.": {
    "_translate": "这种标记的类型。",
    "_note": ""
  },
  "The attributes associated with this mark.": {
    "_translate": "与此标记相关的属性。",
    "_note": ""
  },
  "Given a set of marks, create a new set which contains this one as well, in the right position. If this mark is already in the set, the set itself is returned. If any marks that are set to be exclusive with this mark are present, those are replaced by this one.": {
    "_translate": "给定一组标记，创建一个包含此标记的新集合，并将其放在正确的位置。如果此标记已在集合中，则返回集合本身。如果存在与此标记<a href=\"#model.MarkSpec.excludes\">互斥</a>的任何标记，则将它们替换为此标记。",
    "_note": ""
  },
  "Test whether this mark is in the given set of marks.": {
    "_translate": "测试此标记是否在给定的标记集中。",
    "_note": ""
  },
  "Remove this mark from the given set, returning a new set. If this mark is not in the set, the set itself is returned.": {
    "_translate": "从给定的集合中移除此标记，返回一个新集合。如果此标记不在集合中，则返回集合本身。",
    "_note": ""
  },
  "Test whether this mark has the same type and attributes as another mark.": {
    "_translate": "测试此标记是否与另一个标记具有相同的类型和属性。",
    "_note": ""
  },
  "Convert this mark to a JSON-serializeable representation.": {
    "_translate": "将此标记转换为可JSON序列化的表示。",
    "_note": ""
  },
  "Deserialize a mark from JSON.": {
    "_translate": "从 JSON 反序列化标记。",
    "_note": ""
  },
  "Test whether two sets of marks are identical.": {
    "_translate": "测试两组标记是否相同。",
    "_note": ""
  },
  "Create a properly sorted mark set from null, a single mark, or an unsorted array of marks.": {
    "_translate": "从 null、单个标记或未排序的标记数组创建一个正确排序的标记集。",
    "_note": ""
  },
  "The empty set of marks.": {
    "_translate": "空标记集。",
    "_note": ""
  },
  "A slice represents a piece cut out of a larger document. It stores not only a fragment, but also the depth up to which nodes on both side are ‘open’ (cut through).": {
    "_translate": "一片表示从较大文档中切出的一部分。它不仅存储了一个片段，还存储了两侧节点“打开”（切开）的深度。",
    "_note": ""
  },
  "It is not necessary for the content of open nodes to conform to the schema's content constraints, though it should be a valid start/end/middle for such a node, depending on which sides are open.": {
    "_translate": "开放节点的内容不需要符合模式的内容约束，但应是该节点的有效开始/结束/中间，具体取决于哪一侧是开放的。",
    "_note": ""
  },
  "Create a slice. When specifying a non-zero open depth, you must make sure that there are nodes of at least that depth at the appropriate side of the fragment—i.e. if the fragment is an empty paragraph node, openStart and openEnd can't be greater than 1.": {
    "_translate": "创建一个切片。当指定非零的打开深度时，必须确保在片段的适当一侧有至少该深度的节点——即如果片段是一个空段落节点，<code>openStart</code> 和 <code>openEnd</code> 不能大于1。",
    "_note": ""
  },
  "The slice's content.": {
    "_translate": "切片的内容。",
    "_note": ""
  },
  "The open depth at the start of the fragment.": {
    "_translate": "片段开始时的开放深度。",
    "_note": ""
  },
  "The open depth at the end.": {
    "_translate": "末端的开放深度。",
    "_note": ""
  },
  "The size this slice would add when inserted into a document.": {
    "_translate": "插入文档时此切片将增加的大小。",
    "_note": ""
  },
  "Tests whether this slice is equal to another slice.": {
    "_translate": "测试此切片是否等于另一个切片。",
    "_note": ""
  },
  "Convert a slice to a JSON-serializable representation.": {
    "_translate": "将切片转换为JSON可序列化的表示。",
    "_note": ""
  },
  "Deserialize a slice from its JSON representation.": {
    "_translate": "从其JSON表示中反序列化一个切片。",
    "_note": ""
  },
  "Create a slice from a fragment by taking the maximum possible open value on both side of the fragment.": {
    "_translate": "从片段中创建一个切片，通过在片段的两侧取最大可能的开放值。",
    "_note": ""
  },
  "The empty slice.": {
    "_translate": "空的切片。",
    "_note": ""
  },
  "An object holding the attributes of a node.": {
    "_translate": "一个包含节点属性的对象。",
    "_note": ""
  },
  "Error type raised by Node.replace when given an invalid replacement.": {
    "_translate": "当提供无效替换时，由<a href=\"#model.Node.replace\"><code>Node.replace</code></a>引发的错误类型。",
    "_note": ""
  },
  "Positions in a document can be represented as integer offsets. But you'll often want to use a more convenient representation.": {
    "_translate": "文档中的位置可以表示为整数<a href=\"/docs/guide/#doc.indexing\">偏移量</a>。但您通常会希望使用更方便的表示方式。",
    "_note": ""
  },
  "Throughout this interface, methods that take an optional depth parameter will interpret undefined as this.depth and negative numbers as this.depth + value.": {
    "_translate": "在整个接口中，带有可选<code>depth</code>参数的方法将把未定义解释为<code>this.depth</code>，并将负数解释为<code>this.depth + value</code>。",
    "_note": ""
  },
  "You can resolve a position to get more information about it. Objects of this class represent such a resolved position, providing various pieces of context information, and some helper methods.": {
    "_translate": "你可以<a href=\"#model.Node.resolve\"><em>解析</em></a>一个位置以获取更多信息。此类的对象表示这样一个已解析的位置，提供各种上下文信息和一些辅助方法。",
    "_note": ""
  },
  "The number of levels the parent node is from the root. If this position points directly into the root node, it is 0. If it points into a top-level paragraph, 1, and so on.": {
    "_translate": "父节点距离根节点的层数。如果此位置直接指向根节点，则为0。如果指向顶级段落，则为1，依此类推。",
    "_note": ""
  },
  "The position that was resolved.": {
    "_translate": "解决了的位置。",
    "_note": ""
  },
  "The offset this position has into its parent node.": {
    "_translate": "该位置相对于其父节点的偏移。",
    "_note": ""
  },
  "The parent node that the position points into. Note that even if a position points into a text node, that node is not considered the parent—text nodes are ‘flat’ in this model, and have no content.": {
    "_translate": "位置指向的父节点。请注意，即使位置指向文本节点，该节点也不被视为父节点——在此模型中，文本节点是“扁平”的，没有内容。",
    "_note": ""
  },
  "The root node in which the position was resolved.": {
    "_translate": "位置已解析的根节点。",
    "_note": ""
  },
  "The ancestor node at the given level. p.node(p.depth) is the same as p.parent.": {
    "_translate": "给定级别的祖先节点。<code>p.node(p.depth)</code> 与 <code>p.parent</code> 相同。",
    "_note": ""
  },
  "The index into the ancestor at the given level. If this points at the 3rd node in the 2nd paragraph on the top level, for example, p.index(0) is 1 and p.index(1) is 2.": {
    "_translate": "给定级别的祖先索引。如果这指向顶层第2段中的第3个节点，例如，<code>p.index(0)</code> 是 1，<code>p.index(1)</code> 是 2。",
    "_note": ""
  },
  "The index pointing after this position into the ancestor at the given level.": {
    "_translate": "该索引指向在给定级别的祖先中的此位置之后。",
    "_note": ""
  },
  "The (absolute) position at the start of the node at the given level.": {
    "_translate": "在给定级别的节点开始处的（绝对）位置。",
    "_note": ""
  },
  "The (absolute) position at the end of the node at the given level.": {
    "_translate": "节点在给定级别末尾的（绝对）位置。",
    "_note": ""
  },
  "The (absolute) position directly before the wrapping node at the given level, or, when depth is this.depth + 1, the original position.": {
    "_translate": "在给定级别中，直接位于包装节点之前的（绝对）位置，或者当<code>depth</code>是<code>this.depth + 1</code>时，原始位置。",
    "_note": ""
  },
  "The (absolute) position directly after the wrapping node at the given level, or the original position when depth is this.depth + 1.": {
    "_translate": "在给定级别的包装节点之后的（绝对）位置，或者当<code>depth</code>是<code>this.depth + 1</code>时的原始位置。",
    "_note": ""
  },
  "When this position points into a text node, this returns the distance between the position and the start of the text node. Will be zero for positions that point between nodes.": {
    "_translate": "当此位置指向文本节点时，此方法返回该位置与文本节点起始位置之间的距离。对于指向节点之间的位置，将为零。",
    "_note": ""
  },
  "Get the node directly after the position, if any. If the position points into a text node, only the part of that node after the position is returned.": {
    "_translate": "获取紧接在该位置之后的节点（如果有）。如果该位置指向一个文本节点，则仅返回该节点中位于该位置之后的部分。",
    "_note": ""
  },
  "Get the position at the given index in the parent node at the given depth (which defaults to this.depth).": {
    "_translate": "在给定深度（默认为<code>this.depth</code>）的父节点中获取给定索引的位置。",
    "_note": ""
  },
  "Get the node directly before the position, if any. If the position points into a text node, only the part of that node before the position is returned.": {
    "_translate": "获取该位置之前的节点（如果有）。如果该位置指向一个文本节点，则仅返回该节点在该位置之前的部分。",
    "_note": ""
  },
  "Get the marks at this position, factoring in the surrounding marks' inclusive property. If the position is at the start of a non-empty node, the marks of the node after it (if any) are returned.": {
    "_translate": "获取此位置的标记，同时考虑周围标记的<a href=\"#model.MarkSpec.inclusive\"><code>inclusive</code></a>属性。如果位置位于非空节点的开头，则返回其后的节点（如果有）的标记。",
    "_note": ""
  },
  "Get the marks after the current position, if any, except those that are non-inclusive and not present at position $end. This is mostly useful for getting the set of marks to preserve after a deletion. Will return null if this position is at the end of its parent node or its parent node isn't a textblock (in which case no marks should be preserved).": {
    "_translate": "获取当前位置之后的标记（如果有），但不包括那些非包含性且不在位置<code>$end</code>的标记。这主要用于在删除后获取要保留的标记集。如果此位置位于其父节点的末尾或其父节点不是文本块（在这种情况下不应保留任何标记），将返回<code>null</code>。",
    "_note": ""
  },
  "The depth up to which this position and the given (non-resolved) position share the same parent nodes.": {
    "_translate": "这个位置和给定的（未解析的）位置共享相同父节点的深度。",
    "_note": ""
  },
  "Returns a range based on the place where this position and the given position diverge around block content. If both point into the same textblock, for example, a range around that textblock will be returned. If they point into different blocks, the range around those blocks in their shared ancestor is returned. You can pass in an optional predicate that will be called with a parent node to see if a range into that parent is acceptable.": {
    "_translate": "返回一个基于此位置和给定位置在块内容周围分歧的地方的范围。例如，如果两者都指向同一个文本块，则会返回该文本块周围的范围。如果它们指向不同的块，则返回它们共享祖先中的那些块周围的范围。您可以传入一个可选的谓词，该谓词将与父节点一起调用，以查看进入该父节点的范围是否可接受。",
    "_note": ""
  },
  "Query whether the given position shares the same parent node.": {
    "_translate": "查询给定位置是否共享相同的父节点。",
    "_note": ""
  },
  "Return the greater of this and the given position.": {
    "_translate": "返回此位置和给定位置中较大的一个。",
    "_note": ""
  },
  "Return the smaller of this and the given position.": {
    "_translate": "返回此位置和给定位置中较小的一个。",
    "_note": ""
  },
  "Represents a flat range of content, i.e. one that starts and ends in the same node.": {
    "_translate": "表示一个平坦的内容范围，即在同一个节点中开始和结束。",
    "_note": ""
  },
  "Construct a node range. $from and $to should point into the same node until at least the given depth, since a node range denotes an adjacent set of nodes in a single parent node.": {
    "_translate": "构建一个节点范围。<code>$from</code>和<code>$to</code>应该指向相同的节点，直到至少给定的<code>depth</code>，因为节点范围表示单个父节点中的相邻节点集。",
    "_note": ""
  },
  "A resolved position along the start of the content. May have a depth greater than this object's depth property, since these are the positions that were used to compute the range, not re-resolved positions directly at its boundaries.": {
    "_translate": "在内容开始处的一个已解析位置。可能具有比此对象的<code>depth</code>属性更大的<code>depth</code>，因为这些是用于计算范围的位置，而不是直接在其边界处重新解析的位置。",
    "_note": ""
  },
  "A position along the end of the content. See caveat for $from.": {
    "_translate": "内容末尾的一个位置。请参阅<a href=\"#model.NodeRange.$from\"><code>$from</code></a>的警告。",
    "_note": ""
  },
  "The depth of the node that this range points into.": {
    "_translate": "该范围指向的节点深度。",
    "_note": ""
  },
  "The position at the start of the range.": {
    "_translate": "范围起始位置。",
    "_note": ""
  },
  "The position at the end of the range.": {
    "_translate": "范围末端的位置。",
    "_note": ""
  },
  "The parent node that the range points into.": {
    "_translate": "范围指向的父节点。",
    "_note": ""
  },
  "The start index of the range in the parent node.": {
    "_translate": "父节点中范围的起始索引。",
    "_note": ""
  },
  "The end index of the range in the parent node.": {
    "_translate": "父节点中范围的结束索引。",
    "_note": ""
  },
  "Every ProseMirror document conforms to a schema, which describes the set of nodes and marks that it is made out of, along with the relations between those, such as which node may occur as a child node of which other nodes.": {
    "_translate": "每个ProseMirror文档都符合一个<a href=\"/docs/guide/#schema\">模式</a>，该模式描述了构成文档的节点和标记的集合，以及它们之间的关系，例如哪个节点可以作为哪个其他节点的子节点出现。",
    "_note": ""
  },
  "A document schema. Holds node and mark type objects for the nodes and marks that may occur in conforming documents, and provides functionality for creating and deserializing such documents.": {
    "_translate": "文档模式。包含<a href=\"#model.NodeType\">节点</a>和<a href=\"#model.MarkType\">标记类型</a>对象，用于可能出现在符合文档中的节点和标记，并提供创建和反序列化此类文档的功能。",
    "_note": ""
  },
  "When given, the type parameters provide the names of the nodes and marks in this schema.": {
    "_translate": "当给定时，类型参数提供此架构中节点和标记的名称。",
    "_note": ""
  },
  "Construct a schema from a schema specification.": {
    "_translate": "从模式<a href=\"#model.SchemaSpec\">规范</a>构建模式。",
    "_note": ""
  },
  "The spec on which the schema is based, with the added guarantee that its nodes and marks properties are OrderedMap instances (not raw objects).": {
    "_translate": "<a href=\"#model.SchemaSpec\">规范</a>，其架构基于此规范，并且保证其<code>nodes</code>和<code>marks</code>属性是<a href=\"https://github.com/marijnh/orderedmap\"><code>OrderedMap</code></a>实例（不是原始对象）。",
    "_note": ""
  },
  "An object mapping the schema's node names to node type objects.": {
    "_translate": "将架构的节点名称映射到节点类型对象的对象。",
    "_note": ""
  },
  "A map from mark names to mark type objects.": {
    "_translate": "从标记名称到标记类型对象的映射。",
    "_note": ""
  },
  "The linebreak replacement node defined in this schema, if any.": {
    "_translate": "<a href=\"#model.NodeSpec.linebreakReplacement\">换行符替换</a>节点在此模式中定义（如果有）。",
    "_note": ""
  },
  "The type of the default top node for this schema.": {
    "_translate": "该模式的<a href=\"#model.SchemaSpec.topNode\">默认顶级节点</a>类型。",
    "_note": ""
  },
  "An object for storing whatever values modules may want to compute and cache per schema. (If you want to store something in it, try to use property names unlikely to clash.)": {
    "_translate": "一个用于存储模块可能希望计算和缓存每个模式的任何值的对象。（如果你想在其中存储某些内容，请尽量使用不太可能冲突的属性名称。）",
    "_note": ""
  },
  "Create a node in this schema. The type may be a string or a NodeType instance. Attributes will be extended with defaults, content may be a Fragment, null, a Node, or an array of nodes.": {
    "_translate": "在此模式中创建一个节点。<code>type</code>可以是一个字符串或一个<code>NodeType</code>实例。属性将与默认值一起扩展，<code>content</code>可以是一个<code>Fragment</code>、<code>null</code>、一个<code>Node</code>或一个节点数组。",
    "_note": ""
  },
  "Create a text node in the schema. Empty text nodes are not allowed.": {
    "_translate": "在架构中创建一个文本节点。不允许空文本节点。",
    "_note": ""
  },
  "Create a mark with the given type and attributes.": {
    "_translate": "创建具有给定类型和属性的标记。",
    "_note": ""
  },
  "Deserialize a node from its JSON representation. This method is bound.": {
    "_translate": "将节点从其JSON表示中反序列化。此方法是绑定的。",
    "_note": ""
  },
  "Deserialize a mark from its JSON representation. This method is bound.": {
    "_translate": "从其 JSON 表示中反序列化标记。此方法是绑定的。",
    "_note": ""
  },
  "An object describing a schema, as passed to the Schema constructor.": {
    "_translate": "一个描述模式的对象，传递给<a href=\"#model.Schema\"><code>Schema</code></a>构造函数。",
    "_note": ""
  },
  "The node types in this schema. Maps names to NodeSpec objects that describe the node type associated with that name. Their order is significant—it determines which parse rules take precedence by default, and which nodes come first in a given group.": {
    "_translate": "此模式中的节点类型。将名称映射到<a href=\"#model.NodeSpec\"><code>NodeSpec</code></a>对象，这些对象描述与该名称关联的节点类型。它们的顺序很重要——它决定了哪些<a href=\"#model.NodeSpec.parseDOM\">解析规则</a>默认优先，以及在给定<a href=\"#model.NodeSpec.group\">组</a>中哪些节点优先。",
    "_note": ""
  },
  "The mark types that exist in this schema. The order in which they are provided determines the order in which mark sets are sorted and in which parse rules are tried.": {
    "_translate": "该模式中存在的标记类型。它们提供的顺序决定了<a href=\"#model.Mark.addToSet\">标记集</a>的排序顺序以及<a href=\"#model.MarkSpec.parseDOM\">解析规则</a>的尝试顺序。",
    "_note": ""
  },
  "The name of the default top-level node for the schema. Defaults to \"doc\".": {
    "_translate": "默认顶级节点的名称。默认为<code>\"doc\"</code>。",
    "_note": ""
  },
  "A description of a node type, used when defining a schema.": {
    "_translate": "节点类型的描述，用于定义模式时。",
    "_note": ""
  },
  "The content expression for this node, as described in the schema guide. When not given, the node does not allow any content.": {
    "_translate": "该节点的内容表达式，如<a href=\"/docs/guide/#schema.content_expressions\">模式指南</a>中所述。如果未给出，则该节点不允许任何内容。",
    "_note": ""
  },
  "The marks that are allowed inside of this node. May be a space-separated string referring to mark names or groups, \"_\" to explicitly allow all marks, or \"\" to disallow marks. When not given, nodes with inline content default to allowing all marks, other nodes default to not allowing marks.": {
    "_translate": "该节点内允许的标记。可以是一个以空格分隔的字符串，指代标记名称或组，<code>\"_\"</code> 明确允许所有标记，或 <code>\"\"</code> 禁止标记。如果未指定，具有内联内容的节点默认允许所有标记，其他节点默认不允许标记。",
    "_note": ""
  },
  "The group or space-separated groups to which this node belongs, which can be referred to in the content expressions for the schema.": {
    "_translate": "该节点所属的组或以空格分隔的组，可以在模式的内容表达式中引用。",
    "_note": ""
  },
  "Should be set to true for inline nodes. (Implied for text nodes.)": {
    "_translate": "对于内联节点应设置为 true。（对于文本节点则隐含为 true。）",
    "_note": ""
  },
  "Can be set to true to indicate that, though this isn't a leaf node, it doesn't have directly editable content and should be treated as a single unit in the view.": {
    "_translate": "可以设置为 true 以指示，尽管这不是一个 <a href=\"#model.NodeType.isLeaf\">叶节点</a>，它没有直接可编辑的内容，并且在视图中应被视为一个单一单元。",
    "_note": ""
  },
  "Controls whether nodes of this type can be selected as a node selection. Defaults to true for non-text nodes.": {
    "_translate": "控制是否可以将此类型的节点选择为<a href=\"#state.NodeSelection\">节点选择</a>。默认情况下，非文本节点为true。",
    "_note": ""
  },
  "The attributes that nodes of this type get.": {
    "_translate": "此类型节点获得的属性。",
    "_note": ""
  },
  "Determines whether nodes of this type can be dragged without being selected. Defaults to false.": {
    "_translate": "确定是否可以在未选择节点的情况下拖动此类型的节点。默认值为 false。",
    "_note": ""
  },
  "Can be used to indicate that this node contains code, which causes some commands to behave differently.": {
    "_translate": "可用于指示此节点包含代码，这会导致某些命令的行为有所不同。",
    "_note": ""
  },
  "Determines whether this node is considered an important parent node during replace operations (such as paste). Non-defining (the default) nodes get dropped when their entire content is replaced, whereas defining nodes persist and wrap the inserted content.": {
    "_translate": "确定在替换操作（例如粘贴）期间此节点是否被视为重要的父节点。非定义（默认）节点在其全部内容被替换时会被删除，而定义节点则会保留并包裹插入的内容。",
    "_note": ""
  },
  "Controls way whitespace in this a node is parsed. The default is \"normal\", which causes the DOM parser to collapse whitespace in normal mode, and normalize it (replacing newlines and such with spaces) otherwise. \"pre\" causes the parser to preserve spaces inside the node. When this option isn't given, but code is true, whitespace will default to \"pre\". Note that this option doesn't influence the way the node is rendered—that should be handled by toDOM and/or styling.": {
    "_translate": "控制此节点中的空白符解析方式。默认值是<code>\"normal\"</code>，这会导致<a href=\"#model.DOMParser\">DOM 解析器</a>在正常模式下折叠空白符，并在其他情况下将其规范化（用空格替换换行符等）。<code>\"pre\"</code>会使解析器保留节点内的空白符。当未提供此选项但<a href=\"#model.NodeSpec.code\"><code>code</code></a>为 true 时，<code>whitespace</code>将默认为<code>\"pre\"</code>。请注意，此选项不会影响节点的渲染方式——这应由<code>toDOM</code>和/或样式处理。",
    "_note": ""
  },
  "In inserted content the defining parents of the content are preserved when possible. Typically, non-default-paragraph textblock types, and possibly list items, are marked as defining.": {
    "_translate": "在插入的内容中，内容的定义父级在可能的情况下会被保留。通常，非默认段落文本块类型，可能还有列表项，会被标记为定义。",
    "_note": ""
  },
  "When enabled, enables both definingAsContext and definingForContent.": {
    "_translate": "启用后，启用\n<a href=\"#model.NodeSpec.definingAsContext\"><code>definingAsContext</code></a> 和\n<a href=\"#model.NodeSpec.definingForContent\"><code>definingForContent</code></a>。",
    "_note": ""
  },
  "When enabled (default is false), the sides of nodes of this type count as boundaries that regular editing operations, like backspacing or lifting, won't cross. An example of a node that should probably have this enabled is a table cell.": {
    "_translate": "启用时（默认值为 false），此类型节点的边缘将被视为常规编辑操作（如退格或提升）不会跨越的边界。一个可能需要启用此功能的节点示例是表格单元格。",
    "_note": ""
  },
  "Defines the default way a node of this type should be serialized to DOM/HTML (as used by DOMSerializer.fromSchema). Should return a DOM node or an array structure that describes one, with an optional number zero (“hole”) in it to indicate where the node's content should be inserted.": {
    "_translate": "定义此类型节点序列化为DOM/HTML的默认方式（由<a href=\"#model.DOMSerializer%5EfromSchema\"><code>DOMSerializer.fromSchema</code></a>使用）。应返回一个DOM节点或描述一个节点的<a href=\"#model.DOMOutputSpec\">数组结构</a>，其中可以包含一个可选的数字零（“孔”），以指示节点内容应插入的位置。",
    "_note": ""
  },
  "For text nodes, the default is to create a text DOM node. Though it is possible to create a serializer where text is rendered differently, this is not supported inside the editor, so you shouldn't override that in your text node spec.": {
    "_translate": "对于文本节点，默认是创建一个文本 DOM 节点。虽然可以创建一个以不同方式呈现文本的序列化器，但在编辑器内部不支持，因此不应在文本节点规范中覆盖这一点。",
    "_note": ""
  },
  "Defines the default way a node of this type should be serialized to a string representation for debugging (e.g. in error messages).": {
    "_translate": "定义此类型节点序列化为字符串表示以进行调试（例如，在错误消息中）的默认方式。",
    "_note": ""
  },
  "Associates DOM parser information with this node, which can be used by DOMParser.fromSchema to automatically derive a parser. The node field in the rules is implied (the name of this node will be filled in automatically). If you supply your own parser, you do not need to also specify parsing rules in your schema.": {
    "_translate": "将 DOM 解析器信息与此节点关联，<a href=\"#model.DOMParser%5EfromSchema\"><code>DOMParser.fromSchema</code></a> 可以用来自动派生解析器。规则中的 <code>node</code> 字段是隐含的（此节点的名称将自动填写）。如果您提供自己的解析器，则无需在架构中指定解析规则。",
    "_note": ""
  },
  "Defines the default way a leaf node of this type should be serialized to a string (as used by Node.textBetween and Node.textContent).": {
    "_translate": "定义了这种类型的<a href=\"#model.NodeType.isLeaf\">叶节点</a>序列化为字符串的默认方式（由<a href=\"#model.Node%5EtextBetween\"><code>Node.textBetween</code></a>和<a href=\"#model.Node%5EtextContent\"><code>Node.textContent</code></a>使用）。",
    "_note": ""
  },
  "Node specs may include arbitrary properties that can be read by other code via NodeType.spec.": {
    "_translate": "节点规格可能包括任意属性，这些属性可以通过<a href=\"#model.NodeType.spec\"><code>NodeType.spec</code></a>被其他代码读取。",
    "_note": ""
  },
  "A single inline node in a schema can be set to be a linebreak equivalent. When converting between block types that support the node and block types that don't but have whitespace set to \"pre\", setBlockType will convert between newline characters to or from linebreak nodes as appropriate.": {
    "_translate": "在模式中，单个内联节点可以设置为换行符等效项。在支持该节点的块类型和不支持但具有<a href=\"#model.NodeSpec.whitespace\"><code>whitespace</code></a>设置为<code>\"pre\"</code>的块类型之间进行转换时，<a href=\"#transform.Transform.setBlockType\"><code>setBlockType</code></a>将适当地在换行符和换行节点之间进行转换。",
    "_note": ""
  },
  "Used to define marks when creating a schema.": {
    "_translate": "用于在创建模式时定义标记。",
    "_note": ""
  },
  "The attributes that marks of this type get.": {
    "_translate": "这些类型的标记所获得的属性。",
    "_note": ""
  },
  "Whether this mark should be active when the cursor is positioned at its end (or at its start when that is also the start of the parent node). Defaults to true.": {
    "_translate": "无论光标位于标记的末尾时（或位于标记的开头且该开头也是父节点的开头时）该标记是否应处于活动状态。默认值为 true。",
    "_note": ""
  },
  "Determines which other marks this mark can coexist with. Should be a space-separated strings naming other marks or groups of marks. When a mark is added to a set, all marks that it excludes are removed in the process. If the set contains any mark that excludes the new mark but is not, itself, excluded by the new mark, the mark can not be added an the set. You can use the value \"_\" to indicate that the mark excludes all marks in the schema.": {
    "_translate": "确定此标记可以与哪些其他标记共存。应为以空格分隔的字符串，命名其他标记或标记组。当一个标记被<a href=\"#model.Mark.addToSet\">添加</a>到一个集合时，所有被它排除的标记都会在此过程中被移除。如果集合中包含任何排除新标记但本身不被新标记排除的标记，则无法将该标记添加到集合中。您可以使用值<code>\"_\"</code>来表示该标记排除模式中的所有标记。",
    "_note": ""
  },
  "Defaults to only being exclusive with marks of the same type. You can set it to an empty string (or any string not containing the mark's own name) to allow multiple marks of a given type to coexist (as long as they have different attributes).": {
    "_translate": "默认为仅与相同类型的标记排他。您可以将其设置为空字符串（或任何不包含标记自身名称的字符串）以允许多个给定类型的标记共存（只要它们具有不同的属性）。",
    "_note": ""
  },
  "The group or space-separated groups to which this mark belongs.": {
    "_translate": "该标记所属的组或以空格分隔的组。",
    "_note": ""
  },
  "Determines whether marks of this type can span multiple adjacent nodes when serialized to DOM/HTML. Defaults to true.": {
    "_translate": "确定此类型的标记在序列化为DOM/HTML时是否可以跨越多个相邻节点。默认为true。",
    "_note": ""
  },
  "Defines the default way marks of this type should be serialized to DOM/HTML. When the resulting spec contains a hole, that is where the marked content is placed. Otherwise, it is appended to the top node.": {
    "_translate": "定义此类型标记应序列化为DOM/HTML的默认方式。当生成的规范包含一个空洞时，标记的内容将放置在该处。否则，它将附加到顶级节点。",
    "_note": ""
  },
  "Associates DOM parser information with this mark (see the corresponding node spec field). The mark field in the rules is implied.": {
    "_translate": "将DOM解析器信息与此标记关联（请参阅相应的<a href=\"#model.NodeSpec.parseDOM\">节点规范字段</a>）。规则中的<code>mark</code>字段是隐含的。",
    "_note": ""
  },
  "Mark specs can include additional properties that can be inspected through MarkType.spec when working with the mark.": {
    "_translate": "Mark 规格可以包括其他属性，这些属性可以在使用标记时通过 <a href=\"#model.MarkType.spec\"><code>MarkType.spec</code></a> 进行检查。",
    "_note": ""
  },
  "Used to define attributes on nodes or marks.": {
    "_translate": "用于<a href=\"#model.NodeSpec.attrs\">定义</a>节点或标记上的属性。",
    "_note": ""
  },
  "The default value for this attribute, to use when no explicit value is provided. Attributes that have no default must be provided whenever a node or mark of a type that has them is created.": {
    "_translate": "此属性的默认值，当未提供明确值时使用。没有默认值的属性必须在创建具有这些属性的节点或标记时提供。",
    "_note": ""
  },
  "A function or type name used to validate values of this attribute. This will be used when deserializing the attribute from JSON, and when running Node.check. When a function, it should raise an exception if the value isn't of the expected type or shape. When a string, it should be a |-separated string of primitive types (\"number\", \"string\", \"boolean\", \"null\", and \"undefined\"), and the library will raise an error when the value is not one of those types.": {
    "_translate": "用于验证此属性值的函数或类型名称。这将在从 JSON 反序列化属性时使用，并在运行 <a href=\"#model.Node.check\"><code>Node.check</code></a> 时使用。当是一个函数时，如果值不是预期的类型或形状，则应引发异常。当是一个字符串时，它应该是一个由原始类型（<code>\"number\"</code>、<code>\"string\"</code>、<code>\"boolean\"</code>、<code>\"null\"</code> 和 <code>\"undefined\"</code>）组成的用 <code>|</code> 分隔的字符串，并且当值不是这些类型之一时，库将引发错误。",
    "_note": ""
  },
  "Node types are objects allocated once per Schema and used to tag Node instances. They contain information about the node type, such as its name and what kind of node it represents.": {
    "_translate": "节点类型是每个<code>Schema</code>分配一次的对象，用于<a href=\"#model.Node.type\">标记</a><code>Node</code>实例。它们包含有关节点类型的信息，例如其名称和它代表的节点类型。",
    "_note": ""
  },
  "The name the node type has in this schema.": {
    "_translate": "该节点类型在此模式中的名称。",
    "_note": ""
  },
  "A link back to the Schema the node type belongs to.": {
    "_translate": "指向节点类型所属的<code>Schema</code>的链接。",
    "_note": ""
  },
  "The spec that this type is based on": {
    "_translate": "该类型基于的规范",
    "_note": ""
  },
  "True if this node type has inline content.": {
    "_translate": "如果此节点类型具有内联内容，则为真。",
    "_note": ""
  },
  "True if this is a block type": {
    "_translate": "如果这是一个块类型，则为真",
    "_note": ""
  },
  "True if this is the text node type.": {
    "_translate": "如果这是文本节点类型，则为真。",
    "_note": ""
  },
  "True if this is an inline type.": {
    "_translate": "如果这是内联类型，则为真。",
    "_note": ""
  },
  "True if this is a textblock type, a block that contains inline content.": {
    "_translate": "如果这是一个文本块类型，一个包含内联内容的块，则为真。",
    "_note": ""
  },
  "True for node types that allow no content.": {
    "_translate": "对不允许内容的节点类型为真。",
    "_note": ""
  },
  "True when this node is an atom, i.e. when it does not have directly editable content.": {
    "_translate": "当此节点是原子时为真，即当它没有直接可编辑的内容时。",
    "_note": ""
  },
  "Return true when this node type is part of the given group.": {
    "_translate": "当此节点类型是给定的<a href=\"#model.NodeSpec.group\">组</a>的一部分时返回 true。",
    "_note": ""
  },
  "The starting match of the node type's content expression.": {
    "_translate": "节点类型内容表达式的起始匹配。",
    "_note": ""
  },
  "The set of marks allowed in this node. null means all marks are allowed.": {
    "_translate": "该节点中允许的标记集。<code>null</code>表示允许所有标记。",
    "_note": ""
  },
  "The node type's whitespace option.": {
    "_translate": "节点类型的<a href=\"#model.NodeSpec.whitespace\">空白</a>选项。",
    "_note": ""
  },
  "Tells you whether this node type has any required attributes.": {
    "_translate": "告诉你此节点类型是否有任何必需的属性。",
    "_note": ""
  },
  "Indicates whether this node allows some of the same content as the given node type.": {
    "_translate": "指示此节点是否允许与给定节点类型相同的一些内容。",
    "_note": ""
  },
  "Create a Node of this type. The given attributes are checked and defaulted (you can pass null to use the type's defaults entirely, if no required attributes exist). content may be a Fragment, a node, an array of nodes, or null. Similarly marks may be null to default to the empty set of marks.": {
    "_translate": "创建此类型的<code>Node</code>。给定的属性会被检查并设置默认值（如果没有必需的属性存在，你可以传递<code>null</code>来完全使用该类型的默认值）。<code>content</code>可以是<code>Fragment</code>、一个节点、一组节点或<code>null</code>。同样地，<code>marks</code>可以是<code>null</code>，以默认为空的标记集。",
    "_note": ""
  },
  "Like create, but check the given content against the node type's content restrictions, and throw an error if it doesn't match.": {
    "_translate": "像<a href=\"#model.NodeType.create\"><code>create</code></a>，但检查给定内容是否符合节点类型的内容限制，如果不匹配则抛出错误。",
    "_note": ""
  },
  "Like create, but see if it is necessary to add nodes to the start or end of the given fragment to make it fit the node. If no fitting wrapping can be found, return null. Note that, due to the fact that required nodes can always be created, this will always succeed if you pass null or Fragment.empty as content.": {
    "_translate": "像 <a href=\"#model.NodeType.create\"><code>create</code></a>，但看看是否有必要在给定片段的开头或结尾添加节点以使其适应节点。如果找不到合适的包装，则返回 null。请注意，由于所需的节点总是可以创建的，如果您传递 null 或 <code>Fragment.empty</code> 作为内容，这将始终成功。",
    "_note": ""
  },
  "Returns true if the given fragment is valid content for this node type.": {
    "_translate": "如果给定的片段是此节点类型的有效内容，则返回 true",
    "_note": ""
  },
  "Check whether the given mark type is allowed in this node.": {
    "_translate": "检查此节点中是否允许给定的标记类型。",
    "_note": ""
  },
  "Test whether the given set of marks are allowed in this node.": {
    "_translate": "测试此节点中是否允许给定的标记集。",
    "_note": ""
  },
  "Removes the marks that are not allowed in this node from the given set.": {
    "_translate": "从给定的集合中删除此节点中不允许的标记。",
    "_note": ""
  },
  "Like nodes, marks (which are associated with nodes to signify things like emphasis or being part of a link) are tagged with type objects, which are instantiated once per Schema.": {
    "_translate": "像节点一样，标记（与节点关联以表示强调或作为链接的一部分）用类型对象<a href=\"#model.Mark.type\">标记</a>，每个<code>Schema</code>实例化一次。",
    "_note": ""
  },
  "The name of the mark type.": {
    "_translate": "标记类型的名称。",
    "_note": ""
  },
  "The schema that this mark type instance is part of.": {
    "_translate": "该标记类型实例所属的模式。",
    "_note": ""
  },
  "The spec on which the type is based.": {
    "_translate": "类型所基于的规范。",
    "_note": ""
  },
  "Create a mark of this type. attrs may be null or an object containing only some of the mark's attributes. The others, if they have defaults, will be added.": {
    "_translate": "创建此类型的标记。<code>attrs</code> 可以是 <code>null</code> 或仅包含部分标记属性的对象。其他属性（如果有默认值）将被添加。",
    "_note": ""
  },
  "When there is a mark of this type in the given set, a new set without it is returned. Otherwise, the input set is returned.": {
    "_translate": "当给定集合中有这种类型的标记时，将返回一个没有它的新集合。否则，返回输入集合。",
    "_note": ""
  },
  "Tests whether there is a mark of this type in the given set.": {
    "_translate": "测试给定集合中是否存在此类型的标记。",
    "_note": ""
  },
  "Queries whether a given mark type is excluded by this one.": {
    "_translate": "查询给定的标记类型是否被此标记类型<a href=\"#model.MarkSpec.excludes\">排除</a>。",
    "_note": ""
  },
  "Instances of this class represent a match state of a node type's content expression, and can be used to find out whether further content matches here, and whether a given position is a valid end of the node.": {
    "_translate": "此类的实例表示节点类型的<a href=\"#model.NodeSpec.content\">内容表达式</a>的匹配状态，并且可以用来判断此处是否有进一步的内容匹配，以及给定位置是否是节点的有效结束位置。",
    "_note": ""
  },
  "True when this match state represents a valid end of the node.": {
    "_translate": "当此匹配状态表示节点的有效结束时为真。",
    "_note": ""
  },
  "Match a node type, returning a match after that node if successful.": {
    "_translate": "匹配一个节点类型，如果成功则在该节点之后返回一个匹配。",
    "_note": ""
  },
  "Try to match a fragment. Returns the resulting match when successful.": {
    "_translate": "尝试匹配一个片段。成功时返回结果匹配。",
    "_note": ""
  },
  "Get the first matching node type at this match position that can be generated.": {
    "_translate": "获取在此匹配位置可以生成的第一个匹配节点类型。",
    "_note": ""
  },
  "Try to match the given fragment, and if that fails, see if it can be made to match by inserting nodes in front of it. When successful, return a fragment of inserted nodes (which may be empty if nothing had to be inserted). When toEnd is true, only return a fragment if the resulting match goes to the end of the content expression.": {
    "_translate": "尝试匹配给定的片段，如果失败，看看是否可以通过在其前面插入节点来使其匹配。成功时，返回插入节点的片段（如果不需要插入任何内容，则可能为空）。当<code>toEnd</code>为true时，仅在结果匹配到内容表达式的末尾时返回片段。",
    "_note": ""
  },
  "Find a set of wrapping node types that would allow a node of the given type to appear at this position. The result may be empty (when it fits directly) and will be null when no such wrapping exists.": {
    "_translate": "找到一组包装节点类型，允许给定类型的节点出现在此位置。结果可能为空（当它直接适合时），如果不存在这样的包装，则结果将为null。",
    "_note": ""
  },
  "The number of outgoing edges this node has in the finite automaton that describes the content expression.": {
    "_translate": "该节点在描述内容表达式的有限自动机中具有的出边数。",
    "_note": ""
  },
  "Get the _n_​th outgoing edge from this node in the finite automaton that describes the content expression.": {
    "_translate": "从描述内容表达式的有限自动机中获取该节点的第 _n_ 条出边。",
    "_note": ""
  },
  "Because representing a document as a tree of DOM nodes is central to the way ProseMirror operates, DOM parsing and serializing is integrated with the model.": {
    "_translate": "因为将文档表示为DOM节点树是ProseMirror操作的核心，DOM <a href=\"#model.DOMParser\">解析</a>和<a href=\"#model.DOMSerializer\">序列化</a>与模型集成在一起。",
    "_note": ""
  },
  "(But note that you do not need to have a DOM implementation loaded to use this module.)": {
    "_translate": "(但请注意，您<em>不</em>需要加载DOM实现来使用此模块。)",
    "_note": ""
  },
  "A DOM parser represents a strategy for parsing DOM content into a ProseMirror document conforming to a given schema. Its behavior is defined by an array of rules.": {
    "_translate": "DOM解析器表示一种将DOM内容解析为符合给定模式的ProseMirror文档的策略。其行为由一组<a href=\"#model.ParseRule\">规则</a>定义。",
    "_note": ""
  },
  "Create a parser that targets the given schema, using the given parsing rules.": {
    "_translate": "创建一个针对给定模式的解析器，使用给定的解析规则。",
    "_note": ""
  },
  "The schema into which the parser parses.": {
    "_translate": "解析器解析到的模式。",
    "_note": ""
  },
  "The set of parse rules that the parser uses, in order of precedence.": {
    "_translate": "解析器使用的<a href=\"#model.ParseRule\">解析规则</a>集，按优先级顺序排列。",
    "_note": ""
  },
  "Parse a document from the content of a DOM node.": {
    "_translate": "从DOM节点的内容解析文档。",
    "_note": ""
  },
  "Parses the content of the given DOM node, like parse, and takes the same set of options. But unlike that method, which produces a whole node, this one returns a slice that is open at the sides, meaning that the schema constraints aren't applied to the start of nodes to the left of the input and the end of nodes at the end.": {
    "_translate": "解析给定DOM节点的内容，就像\n<a href=\"#model.DOMParser.parse\"><code>parse</code></a>，并采用相同的一组选项。但与生成整个节点的方法不同，这个方法返回一个两侧开放的切片，这意味着模式约束不会应用于输入左侧节点的开始和末端节点的结束。",
    "_note": ""
  },
  "Construct a DOM parser using the parsing rules listed in a schema's node specs, reordered by priority.": {
    "_translate": "使用架构的<a href=\"#model.NodeSpec.parseDOM\">节点规范</a>中列出的解析规则构建一个DOM解析器，并按<a href=\"#model.ParseRule.priority\">优先级</a>重新排序。",
    "_note": ""
  },
  "These are the options recognized by the parse and parseSlice methods.": {
    "_translate": "这些是<a href=\"#model.DOMParser.parse\"><code>parse</code></a>和<a href=\"#model.DOMParser.parseSlice\"><code>parseSlice</code></a>方法所识别的选项。",
    "_note": ""
  },
  "By default, whitespace is collapsed as per HTML's rules. Pass true to preserve whitespace, but normalize newlines to spaces, and \"full\" to preserve whitespace entirely.": {
    "_translate": "默认情况下，空白会根据HTML的规则被折叠。传递<code>true</code>以保留空白，但将换行符规范化为空格，并传递<code>\"full\"</code>以完全保留空白。",
    "_note": ""
  },
  "When given, the parser will, beside parsing the content, record the document positions of the given DOM positions. It will do so by writing to the objects, adding a pos property that holds the document position. DOM positions that are not in the parsed content will not be written to.": {
    "_translate": "当提供时，解析器除了解析内容外，还会记录给定DOM位置的文档位置。它会通过写入对象来实现这一点，添加一个<code>pos</code>属性来保存文档位置。不在解析内容中的DOM位置将不会被写入。",
    "_note": ""
  },
  "The child node index to start parsing from.": {
    "_translate": "开始解析的子节点索引。",
    "_note": ""
  },
  "The child node index to stop parsing at.": {
    "_translate": "停止解析的子节点索引。",
    "_note": ""
  },
  "By default, the content is parsed into the schema's default top node type. You can pass this option to use the type and attributes from a different node as the top container.": {
    "_translate": "默认情况下，内容会被解析为模式的默认<a href=\"#model.Schema.topNodeType\">顶级节点类型</a>。您可以传递此选项以使用不同节点的类型和属性作为顶级容器。",
    "_note": ""
  },
  "Provide the starting content match that content parsed into the top node is matched against.": {
    "_translate": "提供与解析到顶节点的内容匹配的起始内容。",
    "_note": ""
  },
  "A set of additional nodes to count as context when parsing, above the given top node.": {
    "_translate": "一组额外的节点在解析时作为<a href=\"#model.ParseRule.context\">上下文</a>，在给定的<a href=\"#model.ParseOptions.topNode\">顶级节点</a>之上。",
    "_note": ""
  },
  "Fields that may be present in both tag and style parse rules.": {
    "_translate": "在<a href=\"#model.TagParseRule\">标签</a>和<a href=\"#model.StyleParseRule\">样式</a>解析规则中可能存在的字段。",
    "_note": ""
  },
  "Can be used to change the order in which the parse rules in a schema are tried. Those with higher priority come first. Rules without a priority are counted as having priority 50. This property is only meaningful in a schema—when directly constructing a parser, the order of the rule array is used.": {
    "_translate": "可用于更改在模式中尝试解析规则的顺序。优先级较高的规则优先。没有优先级的规则被视为优先级50。此属性仅在模式中有意义——在直接构建解析器时，使用规则数组的顺序。",
    "_note": ""
  },
  "By default, when a rule matches an element or style, no further rules get a chance to match it. By setting this to false, you indicate that even when this rule matches, other rules that come after it should also run.": {
    "_translate": "默认情况下，当一个规则匹配一个元素或样式时，不会有进一步的规则有机会匹配它。通过将此设置为<code>false</code>，您表示即使此规则匹配，之后的其他规则也应运行。",
    "_note": ""
  },
  "The name of the mark type to wrap the matched content in.": {
    "_translate": "标记类型的名称，用于包裹匹配的内容。",
    "_note": ""
  },
  "When given, restricts this rule to only match when the current context—the parent nodes into which the content is being parsed—matches this expression. Should contain one or more node names or node group names followed by single or double slashes. For example \"paragraph/\" means the rule only matches when the parent node is a paragraph, \"blockquote/paragraph/\" restricts it to be in a paragraph that is inside a blockquote, and \"section//\" matches any position inside a section—a double slash matches any sequence of ancestor nodes. To allow multiple different contexts, they can be separated by a pipe (|) character, as in \"blockquote/|list_item/\".": {
    "_translate": "当给定时，将此规则限制为仅在当前上下文（正在解析内容的父节点）与此表达式匹配时才匹配。应包含一个或多个节点名称或节点组名称，后跟单斜杠或双斜杠。例如，<code>\"paragraph/\"</code> 表示规则仅在父节点是段落时匹配，<code>\"blockquote/paragraph/\"</code> 将其限制在块引用内的段落中，而 <code>\"section//\"</code> 匹配节内的任何位置——双斜杠匹配任何祖先节点序列。要允许多个不同的上下文，可以用管道符号 (<code>|</code>) 分隔，如 <code>\"blockquote/|list_item/\"</code>。",
    "_note": ""
  },
  "When true, ignore content that matches this rule.": {
    "_translate": "当为真时，忽略与此规则匹配的内容。",
    "_note": ""
  },
  "When true, finding an element that matches this rule will close the current node.": {
    "_translate": "当为 true 时，找到符合此规则的元素将关闭当前节点。",
    "_note": ""
  },
  "When true, ignore the node that matches this rule, but do parse its content.": {
    "_translate": "当为真时，忽略与此规则匹配的节点，但解析其内容。",
    "_note": ""
  },
  "Attributes for the node or mark created by this rule. When getAttrs is provided, it takes precedence.": {
    "_translate": "此规则创建的节点或标记的属性。当提供<code>getAttrs</code>时，它优先。",
    "_note": ""
  },
  "Parse rule targeting a DOM element.": {
    "_translate": "解析规则定位一个DOM元素。",
    "_note": ""
  },
  "A CSS selector describing the kind of DOM elements to match.": {
    "_translate": "描述要匹配的DOM元素类型的CSS选择器。",
    "_note": ""
  },
  "The namespace to match. Nodes are only matched when the namespace matches or this property is null.": {
    "_translate": "要匹配的命名空间。仅当命名空间匹配或此属性为 null 时才匹配节点。",
    "_note": ""
  },
  "The name of the node type to create when this rule matches. Each rule should have either a node, mark, or ignore property (except when it appears in a node or mark spec, in which case the node or mark property will be derived from its position).": {
    "_translate": "匹配此规则时要创建的节点类型的名称。每个规则应具有<code>node</code>、<code>mark</code>或<code>ignore</code>属性（除非它出现在<a href=\"#model.NodeSpec.parseDOM\">node</a>或<a href=\"#model.MarkSpec.parseDOM\">mark spec</a>中，在这种情况下，<code>node</code>或<code>mark</code>属性将从其位置派生）。",
    "_note": ""
  },
  "A function used to compute the attributes for the node or mark created by this rule. Can also be used to describe further conditions the DOM element or style must match. When it returns false, the rule won't match. When it returns null or undefined, that is interpreted as an empty/default set of attributes.": {
    "_translate": "用于计算由此规则创建的节点或标记的属性的函数。也可以用于描述 DOM 元素或样式必须匹配的进一步条件。当返回<code>false</code>时，规则将不匹配。当返回 null 或 undefined 时，解释为一组空/默认属性。",
    "_note": ""
  },
  "Can be used to override the content of a matched node. When present, instead of parsing the node's child nodes, the result of this function is used.": {
    "_translate": "可用于覆盖匹配节点的内容。当存在时，不解析节点的子节点，而是使用此函数的结果。",
    "_note": ""
  },
  "For rules that produce non-leaf nodes, by default the content of the DOM element is parsed as content of the node. If the child nodes are in a descendent node, this may be a CSS selector string that the parser must use to find the actual content element, or a function that returns the actual content element to the parser.": {
    "_translate": "对于生成非叶节点的规则，默认情况下，DOM 元素的内容会被解析为节点的内容。如果子节点位于后代节点中，这可能是解析器必须使用的 CSS 选择器字符串，以找到实际的内容元素，或者是一个返回实际内容元素给解析器的函数。",
    "_note": ""
  },
  "A parse rule targeting a style property.": {
    "_translate": "一个解析规则，目标是一个样式属性。",
    "_note": ""
  },
  "Controls whether whitespace should be preserved when parsing the content inside the matched element. false means whitespace may be collapsed, true means that whitespace should be preserved but newlines normalized to spaces, and \"full\" means that newlines should also be preserved.": {
    "_translate": "控制在解析匹配元素内部内容时是否应保留空白。<code>false</code>表示空白可能会被折叠，<code>true</code>表示应保留空白但将换行符规范化为空格，<code>\"full\"</code>表示也应保留换行符。",
    "_note": ""
  },
  "A CSS property name to match. This rule will match inline styles that list that property. May also have the form \"property=value\", in which case the rule only matches if the property's value exactly matches the given value. (For more complicated filters, use getAttrs and return false to indicate that the match failed.) Rules matching styles may only produce marks, not nodes.": {
    "_translate": "一个要匹配的CSS属性名称。此规则将匹配列出该属性的内联样式。也可以采用<code>\"property=value\"</code>的形式，在这种情况下，只有当属性的值完全匹配给定值时，规则才会匹配。（对于更复杂的过滤器，请使用<a href=\"#model.ParseRule.getAttrs\"><code>getAttrs</code></a>并返回false以指示匹配失败。）匹配样式的规则只能生成<a href=\"#model.ParseRule.mark\">marks</a>，而不是节点。",
    "_note": ""
  },
  "Style rules can remove marks from the set of active marks.": {
    "_translate": "样式规则可以从活动标记集中移除标记。",
    "_note": ""
  },
  "A function used to compute the attributes for the node or mark created by this rule. Called with the style's value.": {
    "_translate": "用于计算由此规则创建的节点或标记属性的函数。使用样式的值调用。",
    "_note": ""
  },
  "A value that describes how to parse a given DOM node or inline style as a ProseMirror node or mark.": {
    "_translate": "一个描述如何将给定的DOM节点或内联样式解析为ProseMirror节点或标记的值。",
    "_note": ""
  },
  "A DOM serializer knows how to convert ProseMirror nodes and marks of various types to DOM nodes.": {
    "_translate": "一个DOM序列化器知道如何将各种类型的ProseMirror节点和标记转换为DOM节点。",
    "_note": ""
  },
  "Create a serializer. nodes should map node names to functions that take a node and return a description of the corresponding DOM. marks does the same for mark names, but also gets an argument that tells it whether the mark's content is block or inline content (for typical use, it'll always be inline). A mark serializer may be null to indicate that marks of that type should not be serialized.": {
    "_translate": "创建一个序列化器。<code>nodes</code> 应该将节点名称映射到接受一个节点并返回相应 DOM 描述的函数。<code>marks</code> 对标记名称执行相同操作，但还会获取一个参数，该参数指示标记的内容是块内容还是内联内容（对于典型用法，它将始终是内联内容）。标记序列化器可以是 <code>null</code>，以指示不应序列化该类型的标记。",
    "_note": ""
  },
  "The node serialization functions.": {
    "_translate": "节点序列化函数。",
    "_note": ""
  },
  "The mark serialization functions.": {
    "_translate": "标记序列化函数。",
    "_note": ""
  },
  "Serialize the content of this fragment to a DOM fragment. When not in the browser, the document option, containing a DOM document, should be passed so that the serializer can create nodes.": {
    "_translate": "将此片段的内容序列化为一个DOM片段。当不在浏览器中时，应传递包含DOM文档的<code>document</code>选项，以便序列化器可以创建节点。",
    "_note": ""
  },
  "Serialize this node to a DOM node. This can be useful when you need to serialize a part of a document, as opposed to the whole document. To serialize a whole document, use serializeFragment on its content.": {
    "_translate": "将此节点序列化为一个DOM节点。当你需要序列化文档的一部分而不是整个文档时，这会很有用。要序列化整个文档，请在其<a href=\"#model.Node.content\">内容</a>上使用<a href=\"#model.DOMSerializer.serializeFragment\"><code>serializeFragment</code></a>。",
    "_note": ""
  },
  "Render an output spec to a DOM node. If the spec has a hole (zero) in it, contentDOM will point at the node with the hole.": {
    "_translate": "将<a href=\"#model.DOMOutputSpec\">输出规范</a>渲染到一个DOM节点。如果规范中有一个空洞（零），<code>contentDOM</code>将指向带有空洞的节点。",
    "_note": ""
  },
  "Build a serializer using the toDOM properties in a schema's node and mark specs.": {
    "_translate": "构建一个序列化器，使用模式节点和标记规范中的<a href=\"#model.NodeSpec.toDOM\"><code>toDOM</code></a>属性。",
    "_note": ""
  },
  "Gather the serializers in a schema's node specs into an object. This can be useful as a base to build a custom serializer from.": {
    "_translate": "将模式的节点规范中的序列化器收集到一个对象中。\n这可以作为构建自定义序列化器的基础。",
    "_note": ""
  },
  "Gather the serializers in a schema's mark specs into an object.": {
    "_translate": "将模式的标记规范中的序列化器收集到一个对象中。",
    "_note": ""
  },
  "A description of a DOM structure. Can be either a string, which is interpreted as a text node, a DOM node, which is interpreted as itself, a {dom, contentDOM} object, or an array.": {
    "_translate": "对DOM结构的描述。可以是一个字符串，它被解释为一个文本节点，一个DOM节点，它被解释为自身，一个<code>{dom, contentDOM}</code>对象，或一个数组。",
    "_note": ""
  },
  "An array describes a DOM element. The first value in the array should be a string—the name of the DOM element, optionally prefixed by a namespace URL and a space. If the second element is plain object, it is interpreted as a set of attributes for the element. Any elements after that (including the 2nd if it's not an attribute object) are interpreted as children of the DOM elements, and must either be valid DOMOutputSpec values, or the number zero.": {
    "_translate": "一个数组描述了一个DOM元素。数组中的第一个值应该是一个字符串——DOM元素的名称，可以选择性地以命名空间URL和空格作为前缀。如果第二个元素是普通对象，则将其解释为元素的属性集。之后的任何元素（包括第二个，如果它不是属性对象）都被解释为DOM元素的子元素，并且必须是有效的<code>DOMOutputSpec</code>值，或者是数字零。",
    "_note": ""
  },
  "The number zero (pronounced “hole”) is used to indicate the place where a node's child nodes should be inserted. If it occurs in an output spec, it should be the only child element in its parent node.": {
    "_translate": "数字零（发音为“洞”）用于指示应插入节点的子节点的位置。如果它出现在输出规范中，它应该是其父节点中的唯一子元素。",
    "_note": ""
  },
  "This module defines a way of modifying documents that allows changes to be recorded, replayed, and reordered. You can read more about transformations in the guide.": {
    "_translate": "此模块定义了一种修改文档的方法，允许记录、更改和重新排序更改。您可以在<a href=\"/docs/guide/#transform\">指南</a>中阅读更多关于转换的信息。",
    "_note": ""
  },
  "Transforming happens in Steps, which are atomic, well-defined modifications to a document. Applying a step produces a new document.": {
    "_translate": "转换发生在<code>Step</code>中，这是对文档的原子性、定义明确的修改。<a href=\"#transform.Step.apply\">应用</a>一个步骤会生成一个新文档。",
    "_note": ""
  },
  "Each step provides a change map that maps positions in the old document to position in the transformed document. Steps can be inverted to create a step that undoes their effect, and chained together in a convenience object called a Transform.": {
    "_translate": "每个步骤提供一个<a href=\"#transform.StepMap\">更改映射</a>，将旧文档中的位置映射到转换后文档中的位置。步骤可以<a href=\"#transform.Step.invert\">反转</a>以创建一个撤销其效果的步骤，并在一个称为<a href=\"#transform.Transform\"><code>Transform</code></a>的便利对象中链接在一起。",
    "_note": ""
  },
  "A step object represents an atomic change. It generally applies only to the document it was created for, since the positions stored in it will only make sense for that document.": {
    "_translate": "一个步骤对象表示一个原子变化。它通常只适用于为其创建的文档，因为存储在其中的位置仅对该文档有意义。",
    "_note": ""
  },
  "Applies this step to the given document, returning a result object that either indicates failure, if the step can not be applied to this document, or indicates success by containing a transformed document.": {
    "_translate": "将此步骤应用于给定文档，返回一个结果对象，如果无法将步骤应用于此文档，则指示失败，或者通过包含转换后的文档来指示成功。",
    "_note": ""
  },
  "New steps are defined by creating classes that extend Step, overriding the apply, invert, map, getMap and fromJSON methods, and registering your class with a unique JSON-serialization identifier using Step.jsonID.": {
    "_translate": "通过创建扩展<code>Step</code>的类来定义新的步骤，重写<code>apply</code>、<code>invert</code>、<code>map</code>、<code>getMap</code>和<code>fromJSON</code>方法，并使用<a href=\"#transform.Step%5EjsonID\"><code>Step.jsonID</code></a>注册具有唯一JSON序列化标识符的类。",
    "_note": ""
  },
  "Get the step map that represents the changes made by this step, and which can be used to transform between positions in the old and the new document.": {
    "_translate": "获取表示此步骤所做更改的步骤映射，并可用于在旧文档和新文档之间进行位置转换。",
    "_note": ""
  },
  "Create an inverted version of this step. Needs the document as it was before the step as argument.": {
    "_translate": "创建此步骤的反向版本。需要在此步骤之前的文档作为参数。",
    "_note": ""
  },
  "Map this step through a mappable thing, returning either a version of that step with its positions adjusted, or null if the step was entirely deleted by the mapping.": {
    "_translate": "通过可映射的事物映射此步骤，返回调整了位置的该步骤的版本，或者如果该步骤被映射完全删除，则返回<code>null</code>。",
    "_note": ""
  },
  "Try to merge this step with another one, to be applied directly after it. Returns the merged step when possible, null if the steps can't be merged.": {
    "_translate": "尝试将此步骤与另一个步骤合并，以便在其后直接应用。返回合并后的步骤（如果可能），如果无法合并则返回null。",
    "_note": ""
  },
  "Create a JSON-serializeable representation of this step. When defining this for a custom subclass, make sure the result object includes the step type's JSON id under the stepType property.": {
    "_translate": "创建此步骤的 JSON 可序列化表示。当为自定义子类定义此表示时，请确保结果对象在 <code>stepType</code> 属性下包含步骤类型的 <a href=\"#transform.Step%5EjsonID\">JSON id</a>。",
    "_note": ""
  },
  "To be able to serialize steps to JSON, each step needs a string ID to attach to its JSON representation. Use this method to register an ID for your step classes. Try to pick something that's unlikely to clash with steps from other modules.": {
    "_translate": "为了能够将步骤序列化为JSON，每个步骤都需要一个字符串ID来附加到其JSON表示中。使用此方法为您的步骤类注册一个ID。尽量选择不太可能与其他模块的步骤冲突的ID。",
    "_note": ""
  },
  "The result of applying a step. Contains either a new document or a failure value.": {
    "_translate": "结果 <a href=\"#transform.Step.apply\">应用</a> 一个步骤。包含一个新文档或一个失败值。",
    "_note": ""
  },
  "Deserialize a step from its JSON representation. Will call through to the step class' own implementation of this method.": {
    "_translate": "从其 JSON 表示中反序列化一个步骤。将调用步骤类自身实现的此方法。",
    "_note": ""
  },
  "The transformed document, if successful.": {
    "_translate": "如果成功，转换后的文档。",
    "_note": ""
  },
  "The failure message, if unsuccessful.": {
    "_translate": "失败消息，如果不成功。",
    "_note": ""
  },
  "Create a successful step result.": {
    "_translate": "创建一个成功的步骤结果。",
    "_note": ""
  },
  "Call Node.replace with the given arguments. Create a successful result if it succeeds, and a failed one if it throws a ReplaceError.": {
    "_translate": "调用<a href=\"#model.Node.replace\"><code>Node.replace</code></a>并传入给定的参数。如果成功则创建一个成功的结果，如果抛出<code>ReplaceError</code>则创建一个失败的结果。",
    "_note": ""
  },
  "Create a failed step result.": {
    "_translate": "创建一个失败的步骤结果。",
    "_note": ""
  },
  "Replace a part of the document with a slice of new content.": {
    "_translate": "将文档的一部分替换为一段新的内容。",
    "_note": ""
  },
  "The given slice should fit the 'gap' between from and to—the depths must line up, and the surrounding nodes must be able to be joined with the open sides of the slice. When structure is true, the step will fail if the content between from and to is not just a sequence of closing and then opening tokens (this is to guard against rebased replace steps overwriting something they weren't supposed to).": {
    "_translate": "给定的<code>slice</code>应适合<code>from</code>和<code>to</code>之间的“间隙”——深度必须对齐，并且周围的节点必须能够与slice的开放侧连接。当<code>structure</code>为true时，如果from和to之间的内容不仅仅是关闭然后打开的标记序列，则步骤将失败（这是为了防止重新基于的替换步骤覆盖它们不应该覆盖的内容）。",
    "_note": ""
  },
  "The start position of the replaced range.": {
    "_translate": "替换范围的起始位置。",
    "_note": ""
  },
  "The end position of the replaced range.": {
    "_translate": "替换范围的结束位置。",
    "_note": ""
  },
  "The slice to insert.": {
    "_translate": "要插入的切片。",
    "_note": ""
  },
  "Replace a part of the document with a slice of content, but preserve a range of the replaced content by moving it into the slice.": {
    "_translate": "将文档的一部分替换为内容片段，但通过将其移动到片段中来保留被替换内容的范围。",
    "_note": ""
  },
  "Create a replace-around step with the given range and gap. insert should be the point in the slice into which the content of the gap should be moved. structure has the same meaning as it has in the ReplaceStep class.": {
    "_translate": "创建一个具有给定范围和间隙的替换步骤。<code>insert</code> 应该是切片中间隙内容应移动到的点。<code>structure</code> 的含义与 <a href=\"#transform.ReplaceStep\"><code>ReplaceStep</code></a> 类中的含义相同。",
    "_note": ""
  },
  "The start of preserved range.": {
    "_translate": "保存范围的开始。",
    "_note": ""
  },
  "The end of preserved range.": {
    "_translate": "保存范围的结束。",
    "_note": ""
  },
  "Add a mark to all inline content between two positions.": {
    "_translate": "在两个位置之间的所有内联内容添加标记。",
    "_note": ""
  },
  "The position in the slice where the preserved range should be inserted.": {
    "_translate": "在切片中应插入保留范围的位置。",
    "_note": ""
  },
  "Create a mark step.": {
    "_translate": "创建标记步骤。",
    "_note": ""
  },
  "The start of the marked range.": {
    "_translate": "标记范围的开始。",
    "_note": ""
  },
  "The end of the marked range.": {
    "_translate": "标记范围的结束。",
    "_note": ""
  },
  "The mark to add.": {
    "_translate": "添加标记。",
    "_note": ""
  },
  "Remove a mark from all inline content between two positions.": {
    "_translate": "从两个位置之间的所有内联内容中删除标记。",
    "_note": ""
  },
  "Create a mark-removing step.": {
    "_translate": "创建一个去除标记的步骤。",
    "_note": ""
  },
  "The start of the unmarked range.": {
    "_translate": "未标记范围的开始。",
    "_note": ""
  },
  "The end of the unmarked range.": {
    "_translate": "未标记范围的结束。",
    "_note": ""
  },
  "The mark to remove.": {
    "_translate": "要删除的标记。",
    "_note": ""
  },
  "Add a mark to a specific node.": {
    "_translate": "在特定节点添加标记。",
    "_note": ""
  },
  "Create a node mark step.": {
    "_translate": "创建一个节点标记步骤。",
    "_note": ""
  },
  "The position of the target node.": {
    "_translate": "目标节点的位置。",
    "_note": ""
  },
  "Remove a mark from a specific node.": {
    "_translate": "从特定节点移除标记。",
    "_note": ""
  },
  "Update an attribute in a specific node.": {
    "_translate": "更新特定节点中的属性。",
    "_note": ""
  },
  "Construct an attribute step.": {
    "_translate": "构建属性步骤。",
    "_note": ""
  },
  "The attribute to set.": {
    "_translate": "要设置的属性。",
    "_note": ""
  },
  "Update an attribute in the doc node.": {
    "_translate": "更新文档节点中的属性。",
    "_note": ""
  },
  "Mapping positions from one document to another by running through the step maps produced by steps is an important operation in ProseMirror. It is used, for example, for updating the selection when the document changes.": {
    "_translate": "通过运行由步骤生成的<a href=\"#transform.StepMap\">步骤映射</a>，将一个文档中的位置映射到另一个文档是ProseMirror中的一项重要操作。例如，它用于在文档更改时更新选择。",
    "_note": ""
  },
  "There are several things that positions can be mapped through. Such objects conform to this interface.": {
    "_translate": "有几件事可以通过这些位置进行映射。\n这些对象符合此接口。",
    "_note": ""
  },
  "Map a position through this object. When given, assoc (should be -1 or 1, defaults to 1) determines with which side the position is associated, which determines in which direction to move when a chunk of content is inserted at the mapped position.": {
    "_translate": "通过此对象映射一个位置。给定时，<code>assoc</code>（应为-1或1，默认为1）确定位置与哪一侧关联，这决定了在映射位置插入一块内容时移动的方向。",
    "_note": ""
  },
  "Map a position, and return an object containing additional information about the mapping. The result's deleted field tells you whether the position was deleted (completely enclosed in a replaced range) during the mapping. When content on only one side is deleted, the position itself is only considered deleted when assoc points in the direction of the deleted content.": {
    "_translate": "映射一个位置，并返回一个包含有关映射的附加信息的对象。结果的<code>deleted</code>字段告诉您该位置在映射过程中是否被删除（完全包含在替换范围内）。当只有一侧的内容被删除时，只有当<code>assoc</code>指向被删除内容的方向时，位置本身才被视为已删除。",
    "_note": ""
  },
  "An object representing a mapped position with extra information.": {
    "_translate": "表示映射位置及附加信息的对象。",
    "_note": ""
  },
  "The mapped version of the position.": {
    "_translate": "位置的映射版本。",
    "_note": ""
  },
  "Tells you whether the position was deleted, that is, whether the step removed the token on the side queried (via the assoc) argument from the document.": {
    "_translate": "告诉您该位置是否已删除，即该步骤是否从文档中删除了通过<code>assoc</code>参数查询的一侧的标记。",
    "_note": ""
  },
  "Tells you whether the token before the mapped position was deleted.": {
    "_translate": "告诉您映射位置之前的标记是否被删除。",
    "_note": ""
  },
  "True when the token after the mapped position was deleted.": {
    "_translate": "当映射位置后的标记被删除时为真。",
    "_note": ""
  },
  "Tells whether any of the steps mapped through deletes across the position (including both the token before and after the position).": {
    "_translate": "告知是否有任何步骤通过删除跨越位置（包括位置前后的标记）。",
    "_note": ""
  },
  "A map describing the deletions and insertions made by a step, which can be used to find the correspondence between positions in the pre-step version of a document and the same position in the post-step version.": {
    "_translate": "描述步骤所做删除和插入的地图，可以用来找到文档步骤前版本中的位置与步骤后版本中相同位置之间的对应关系。",
    "_note": ""
  },
  "Calls the given function on each of the changed ranges included in this map.": {
    "_translate": "对该映射中包含的每个更改范围调用给定函数。",
    "_note": ""
  },
  "Create a position map. The modifications to the document are represented as an array of numbers, in which each group of three represents a modified chunk as [start, oldSize, newSize].": {
    "_translate": "创建一个位置图。文档的修改表示为一个数字数组，其中每组三个数字表示一个修改的块，如<code>[start, oldSize, newSize]</code>。",
    "_note": ""
  },
  "Create an inverted version of this map. The result can be used to map positions in the post-step document to the pre-step document.": {
    "_translate": "创建此地图的反向版本。结果可以用于将后步骤文档中的位置映射到前步骤文档。",
    "_note": ""
  },
  "Create a map that moves all positions by offset n (which may be negative). This can be useful when applying steps meant for a sub-document to a larger document, or vice-versa.": {
    "_translate": "创建一个将所有位置按偏移量<code>n</code>（可能为负数）移动的映射。这在将适用于子文档的步骤应用于较大文档或反之亦然时非常有用。",
    "_note": ""
  },
  "A StepMap that contains no changed ranges.": {
    "_translate": "一个不包含更改范围的StepMap。",
    "_note": ""
  },
  "A mapping represents a pipeline of zero or more step maps. It has special provisions for losslessly handling mapping positions through a series of steps in which some steps are inverted versions of earlier steps. (This comes up when ‘rebasing’ steps for collaboration or history management.)": {
    "_translate": "映射表示零个或多个<a href=\"#transform.StepMap\">步骤映射</a>的管道。它有特殊的规定，可以无损地处理通过一系列步骤的映射位置，其中一些步骤是早期步骤的反向版本。（当‘<a href=\"/docs/guide/#transform.rebasing\">重新基准化</a>’步骤用于协作或历史管理时，会出现这种情况。）",
    "_note": ""
  },
  "Create a new mapping with the given position maps.": {
    "_translate": "创建一个新的映射与给定的位置映射。",
    "_note": ""
  },
  "The step maps in this mapping.": {
    "_translate": "步骤图在此映射中。",
    "_note": ""
  },
  "The starting position in the maps array, used when map or mapResult is called.": {
    "_translate": "<code>map</code> 或 <code>mapResult</code> 被调用时使用的 <code>maps</code> 数组中的起始位置。",
    "_note": ""
  },
  "The end position in the maps array.": {
    "_translate": "<code>maps</code> 数组中的结束位置。",
    "_note": ""
  },
  "Create a mapping that maps only through a part of this one.": {
    "_translate": "创建一个仅通过其中一部分进行映射的映射。",
    "_note": ""
  },
  "Add a step map to the end of this mapping. If mirrors is given, it should be the index of the step map that is the mirror image of this one.": {
    "_translate": "在此映射的末尾添加一个步骤映射。如果给定<code>mirrors</code>，它应该是此步骤映射的镜像的索引。",
    "_note": ""
  },
  "Add all the step maps in a given mapping to this one (preserving mirroring information).": {
    "_translate": "将给定映射中的所有步骤映射添加到此映射中（保留镜像信息）。",
    "_note": ""
  },
  "Finds the offset of the step map that mirrors the map at the given offset, in this mapping (as per the second argument to appendMap).": {
    "_translate": "找到在此映射中镜像给定偏移量的步骤映射的偏移量（根据<code>appendMap</code>的第二个参数）。",
    "_note": ""
  },
  "Append the inverse of the given mapping to this one.": {
    "_translate": "将给定映射的逆附加到此映射。",
    "_note": ""
  },
  "Create an inverted version of this mapping.": {
    "_translate": "创建此映射的反向版本。",
    "_note": ""
  },
  "Map a position through this mapping.": {
    "_translate": "通过此映射映射一个位置。",
    "_note": ""
  },
  "Map a position through this mapping, returning a mapping result.": {
    "_translate": "通过此映射映射一个位置，返回一个映射结果。",
    "_note": ""
  },
  "Abstraction to build up and track an array of steps representing a document transformation.": {
    "_translate": "构建和跟踪表示文档转换的<a href=\"#transform.Step\">步骤</a>的数组的抽象。",
    "_note": ""
  },
  "Because you often need to collect a number of steps together to effect a composite change, ProseMirror provides an abstraction to make this easy. State transactions are a subclass of transforms.": {
    "_translate": "因为您经常需要将多个步骤组合在一起以实现复合更改，ProseMirror 提供了一种抽象来使这变得容易。<a href=\"#state.Transaction\">状态事务</a>是变换的一个子类。",
    "_note": ""
  },
  "Most transforming methods return the Transform object itself, so that they can be chained.": {
    "_translate": "大多数转换方法返回<code>Transform</code>对象本身，以便它们可以被链接。",
    "_note": ""
  },
  "Create a transform that starts with the given document.": {
    "_translate": "创建一个以给定文档开始的转换。",
    "_note": ""
  },
  "The steps in this transform.": {
    "_translate": "此转换中的步骤。",
    "_note": ""
  },
  "The documents before each of the steps.": {
    "_translate": "每个步骤之前的文件。",
    "_note": ""
  },
  "A mapping with the maps for each of the steps in this transform.": {
    "_translate": "一个映射，其中包含此转换中每个步骤的地图。",
    "_note": ""
  },
  "The current document (the result of applying the steps in the transform).": {
    "_translate": "当前文档（应用转换步骤的结果）。",
    "_note": ""
  },
  "The starting document.": {
    "_translate": "起始文档。",
    "_note": ""
  },
  "Apply a new step in this transform, saving the result. Throws an error when the step fails.": {
    "_translate": "应用此转换中的新步骤，保存结果。当步骤失败时抛出错误。",
    "_note": ""
  },
  "Try to apply a step in this transformation, ignoring it if it fails. Returns the step result.": {
    "_translate": "尝试在此转换中应用一个步骤，如果失败则忽略它。返回步骤结果。",
    "_note": ""
  },
  "True when the document has been changed (when there are any steps).": {
    "_translate": "当文档被更改时（当有任何步骤时）为真。",
    "_note": ""
  },
  "Replace the given range with the given content, which may be a fragment, node, or array of nodes.": {
    "_translate": "将给定范围替换为给定内容，该内容可以是片段、节点或节点数组。",
    "_note": ""
  },
  "Replace the part of the document between from and to with the given slice.": {
    "_translate": "将文档中<code>from</code>和<code>to</code>之间的部分替换为给定的<code>slice</code>。",
    "_note": ""
  },
  "Delete the content between the given positions.": {
    "_translate": "删除给定位置之间的内容。",
    "_note": ""
  },
  "Insert the given content at the given position.": {
    "_translate": "在给定位置插入给定内容。",
    "_note": ""
  },
  "Replace a range of the document with a given slice, using from, to, and the slice's openStart property as hints, rather than fixed start and end points. This method may grow the replaced area or close open nodes in the slice in order to get a fit that is more in line with WYSIWYG expectations, by dropping fully covered parent nodes of the replaced region when they are marked non-defining as context, or including an open parent node from the slice that is marked as defining its content.": {
    "_translate": "用<code>from</code>、<code>to</code>和切片的<a href=\"#model.Slice.openStart\"><code>openStart</code></a>属性作为提示来替换文档的一个范围，而不是固定的起点和终点。此方法可能会通过删除被标记为<a href=\"#model.NodeSpec.definingAsContext\">非定义上下文</a>的替换区域的完全覆盖的父节点，或包含切片中标记为<a href=\"#model.NodeSpec.definingForContent\">定义其内容</a>的开放父节点，以更符合所见即所得的期望，从而扩展替换区域或关闭切片中的开放节点。",
    "_note": ""
  },
  "This is the method, for example, to handle paste. The similar replace method is a more primitive tool which will not move the start and end of its given range, and is useful in situations where you need more precise control over what happens.": {
    "_translate": "这是处理粘贴的方法。例如，类似的<a href=\"#transform.Transform.replace\"><code>replace</code></a>方法是一个更原始的工具，它<em>不会</em>移动其给定范围的开始和结束，在需要更精确控制的情况下非常有用。",
    "_note": ""
  },
  "Replace the given range with a node, but use from and to as hints, rather than precise positions. When from and to are the same and are at the start or end of a parent node in which the given node doesn't fit, this method may move them out towards a parent that does allow the given node to be placed. When the given range completely covers a parent node, this method may completely replace that parent node.": {
    "_translate": "用一个节点替换给定的范围，但使用<code>from</code>和<code>to</code>作为提示，而不是精确的位置。当from和to相同时，并且位于父节点的开始或结束位置，而给定节点不适合时，此方法可能会<em>移动</em>它们到允许放置给定节点的父节点。当给定范围完全覆盖父节点时，此方法可能会完全替换该父节点。",
    "_note": ""
  },
  "Delete the given range, expanding it to cover fully covered parent nodes until a valid replace is found.": {
    "_translate": "删除给定范围，扩展它以覆盖完全覆盖的父节点，直到找到有效的替换。",
    "_note": ""
  },
  "Split the content in the given range off from its parent, if there is sibling content before or after it, and move it up the tree to the depth specified by target. You'll probably want to use liftTarget to compute target, to make sure the lift is valid.": {
    "_translate": "将给定范围内的内容从其父级中分离出来，如果其前后有兄弟内容，则将其向上移动到由<code>target</code>指定的深度。您可能需要使用<a href=\"#transform.liftTarget\"><code>liftTarget</code></a>来计算<code>target</code>，以确保提升是有效的。",
    "_note": ""
  },
  "Join the blocks around the given position. If depth is 2, their last and first siblings are also joined, and so on.": {
    "_translate": "将给定位置周围的块连接起来。如果深度为2，它们的最后一个和第一个兄弟姐妹也会被连接，依此类推。",
    "_note": ""
  },
  "Wrap the given range in the given set of wrappers. The wrappers are assumed to be valid in this position, and should probably be computed with findWrapping.": {
    "_translate": "将给定的<a href=\"#model.NodeRange\">范围</a>包裹在给定的包装器中。\n假定这些包装器在此位置是有效的，并且可能应该使用<a href=\"#transform.findWrapping\"><code>findWrapping</code></a>进行计算。",
    "_note": ""
  },
  "Set the type of all textblocks (partly) between from and to to the given node type with the given attributes.": {
    "_translate": "将所有在<code>from</code>和<code>to</code>之间的文本块（部分）设置为给定的节点类型，并带有给定的属性。",
    "_note": ""
  },
  "Change the type, attributes, and/or marks of the node at pos. When type isn't given, the existing node type is preserved,": {
    "_translate": "更改位于<code>pos</code>的节点的类型、属性和/或标记。当未提供<code>type</code>时，保留现有的节点类型。",
    "_note": ""
  },
  "Set a single attribute on the document to a new value.": {
    "_translate": "将文档上的单个属性设置为新值。",
    "_note": ""
  },
  "Set a single attribute on a given node to a new value. The pos addresses the document content. Use setDocAttribute to set attributes on the document itself.": {
    "_translate": "将给定节点的单个属性设置为新值。\n<code>pos</code> 地址文档内容。使用 <code>setDocAttribute</code> 设置文档本身的属性。",
    "_note": ""
  },
  "Add a mark to the node at position pos.": {
    "_translate": "在位置<code>pos</code>的节点添加一个标记。",
    "_note": ""
  },
  "Remove a mark (or a mark of the given type) from the node at position pos.": {
    "_translate": "从位置<code>pos</code>的节点中移除标记（或给定类型的标记）。",
    "_note": ""
  },
  "Split the node at the given position, and optionally, if depth is greater than one, any number of nodes above that. By default, the parts split off will inherit the node type of the original node. This can be changed by passing an array of types and attributes to use after the split.": {
    "_translate": "在给定位置拆分节点，并且如果<code>depth</code>大于1，还可以选择拆分其上方的任意数量的节点。默认情况下，拆分出来的部分将继承原始节点的节点类型。可以通过传递一个类型和属性的数组来更改拆分后的使用类型。",
    "_note": ""
  },
  "Add the given mark to the inline content between from and to.": {
    "_translate": "将给定的标记添加到<code>from</code>和<code>to</code>之间的内联内容。",
    "_note": ""
  },
  "Remove marks from inline nodes between from and to. When mark is a single mark, remove precisely that mark. When it is a mark type, remove all marks of that type. When it is null, remove all marks of any type.": {
    "_translate": "在<code>from</code>和<code>to</code>之间从内联节点中移除标记。当<code>mark</code>是单个标记时，精确移除该标记。当它是一个标记类型时，移除所有该类型的标记。当它为null时，移除所有类型的标记。",
    "_note": ""
  },
  "Removes all marks and nodes from the content of the node at pos that don't match the given new parent node type. Accepts an optional starting content match as third argument.": {
    "_translate": "从<code>pos</code>处的节点内容中移除所有不符合给定新父节点类型的标记和节点。接受一个可选的起始<a href=\"#model.ContentMatch\">内容匹配</a>作为第三个参数。",
    "_note": ""
  },
  "The following helper functions can be useful when creating transformations or determining whether they are even possible.": {
    "_translate": "以下辅助函数在创建转换或确定它们是否可行时可能会很有用。",
    "_note": ""
  },
  "Try to find a target depth to which the content in the given range can be lifted. Will not go across isolating parent nodes.": {
    "_translate": "尝试找到一个目标深度，将给定范围内的内容提升到该深度。不会跨越<a href=\"#model.NodeSpec.isolating\">隔离</a>父节点。",
    "_note": ""
  },
  "‘Fit’ a slice into a given position in the document, producing a step that inserts it. Will return null if there's no meaningful way to insert the slice here, or inserting it would be a no-op (an empty slice over an empty range).": {
    "_translate": "将一个切片“适配”到文档中的给定位置，生成一个<a href=\"#transform.Step\">步骤</a>来插入它。如果没有有意义的方式在此处插入切片，或者插入它将是无操作（在空范围内的空切片），将返回null。",
    "_note": ""
  },
  "Check whether splitting at the given position is allowed.": {
    "_translate": "检查是否允许在给定位置拆分。",
    "_note": ""
  },
  "Try to find a valid way to wrap the content in the given range in a node of the given type. May introduce extra nodes around and inside the wrapper node, if necessary. Returns null if no valid wrapping could be found. When innerRange is given, that range's content is used as the content to fit into the wrapping, instead of the content of range.": {
    "_translate": "尝试找到一种有效的方法在给定范围内将内容包装在给定类型的节点中。如果有必要，可能会在包装节点的周围和内部引入额外的节点。如果找不到有效的包装，则返回null。当给定<code>innerRange</code>时，使用该范围的内容作为要包装的内容，而不是<code>range</code>的内容。",
    "_note": ""
  },
  "Test whether the blocks before and after a given position can be joined.": {
    "_translate": "测试给定位置前后的块是否可以连接。",
    "_note": ""
  },
  "Find an ancestor of the given position that can be joined to the block before (or after if dir is positive). Returns the joinable point, if any.": {
    "_translate": "找到给定位置的一个祖先，可以与之前的块（或之后的块，如果<code>dir</code>为正）。返回可连接的点（如果有）。",
    "_note": ""
  },
  "Try to find a point where a node of the given type can be inserted near pos, by searching up the node hierarchy when pos itself isn't a valid place but is at the start or end of a node. Return null if no position was found.": {
    "_translate": "尝试在<code>pos</code>附近找到一个可以插入给定类型节点的位置，通过在<code>pos</code>本身不是有效位置但位于节点的开始或结束时向上搜索节点层次结构。如果没有找到位置，则返回null。",
    "_note": ""
  },
  "Finds a position at or around the given position where the given slice can be inserted. Will look at parent nodes' nearest boundary and try there, even if the original position wasn't directly at the start or end of that node. Returns null when no position was found.": {
    "_translate": "在给定位置或其周围找到可以插入给定切片的位置。即使原始位置不直接在该节点的开始或结束，也会查看父节点的最近边界并尝试在那里插入。如果未找到位置，则返回 null。",
    "_note": ""
  },
  "This module exports a number of commands, which are building block functions that encapsulate an editing action. A command function takes an editor state, optionally a dispatch function that it can use to dispatch a transaction and optionally an EditorView instance. It should return a boolean that indicates whether it could perform any action. When no dispatch callback is passed, the command should do a 'dry run', determining whether it is applicable, but not actually doing anything.": {
    "_translate": "此模块导出许多<em>命令</em>，这些命令是封装编辑操作的构建块函数。命令函数接受一个编辑器状态，<em>可选地</em>接受一个<code>dispatch</code>函数，该函数可用于分发事务，<em>可选地</em>接受一个<code>EditorView</code>实例。它应返回一个布尔值，指示是否可以执行任何操作。当没有传递<code>dispatch</code>回调时，命令应进行“干运行”，确定其是否适用，但实际上不执行任何操作。",
    "_note": ""
  },
  "These are mostly used to bind keys and define menu items.": {
    "_translate": "这些主要用于绑定键和定义菜单项。",
    "_note": ""
  },
  "Combine a number of command functions into a single function (which calls them one by one until one returns true).": {
    "_translate": "将多个命令函数组合成一个函数（依次调用它们，直到其中一个返回 true）。",
    "_note": ""
  },
  "Delete the selection, if there is one.": {
    "_translate": "删除选择内容（如果有）。",
    "_note": ""
  },
  "If the selection is empty and at the start of a textblock, try to reduce the distance between that block and the one before it—if there's a block directly before it that can be joined, join them. If not, try to move the selected block closer to the next one in the document structure by lifting it out of its parent or moving it into a parent of the previous block. Will use the view for accurate (bidi-aware) start-of-textblock detection if given.": {
    "_translate": "如果选择为空且位于文本块的开头，请尝试减少该块与前一个块之间的距离——如果前面有一个可以合并的块，则将它们合并。如果没有，请尝试通过将选定的块从其父块中提取出来或将其移动到前一个块的父块中，从而在文档结构中将选定的块移得更靠近下一个块。如果给定，将使用视图进行准确的（双向感知的）文本块开头检测。",
    "_note": ""
  },
  "When the selection is empty and at the start of a textblock, select the node before that textblock, if possible. This is intended to be bound to keys like backspace, after joinBackward or other deleting commands, as a fall-back behavior when the schema doesn't allow deletion at the selected point.": {
    "_translate": "当选择为空且位于文本块的开头时，如果可能，选择该文本块之前的节点。这旨在绑定到像退格键这样的键，在<a href=\"#commands.joinBackward\"><code>joinBackward</code></a>或其他删除命令之后，作为当模式不允许在选定点删除时的后备行为。",
    "_note": ""
  },
  "A more limited form of joinBackward that only tries to join the current textblock to the one before it, if the cursor is at the start of a textblock.": {
    "_translate": "一种更有限的<a href=\"$commands.joinBackward\"><code>joinBackward</code></a>形式，仅在光标位于文本块开头时，尝试将当前文本块与之前的文本块连接起来。",
    "_note": ""
  },
  "If the selection is empty and the cursor is at the end of a textblock, try to reduce or remove the boundary between that block and the one after it, either by joining them or by moving the other block closer to this one in the tree structure. Will use the view for accurate start-of-textblock detection if given.": {
    "_translate": "如果选择为空且光标位于文本块的末尾，请尝试减少或删除该块与其后的块之间的边界，可以通过将它们合并或在树结构中将另一个块移近此块来实现。如果提供，将使用视图进行准确的文本块起始检测。",
    "_note": ""
  },
  "A more limited form of joinForward that only tries to join the current textblock to the one after it, if the cursor is at the end of a textblock.": {
    "_translate": "一种更有限的<a href=\"$commands.joinForward\"><code>joinForward</code></a>形式，仅在光标位于文本块末尾时尝试将当前文本块与后面的文本块连接起来。",
    "_note": ""
  },
  "When the selection is empty and at the end of a textblock, select the node coming after that textblock, if possible. This is intended to be bound to keys like delete, after joinForward and similar deleting commands, to provide a fall-back behavior when the schema doesn't allow deletion at the selected point.": {
    "_translate": "当选择为空且位于文本块末尾时，选择该文本块之后的节点（如果可能）。这旨在绑定到删除键之类的键之后\n<a href=\"#commands.joinForward\"><code>joinForward</code></a>和类似的删除命令，以在模式不允许在选定点删除时提供后备行为。",
    "_note": ""
  },
  "Join the selected block or, if there is a text selection, the closest ancestor block of the selection that can be joined, with the sibling above it.": {
    "_translate": "加入所选块，或者如果有文本选择，则加入选择的最近祖先块与其上方的兄弟块。",
    "_note": ""
  },
  "Join the selected block, or the closest ancestor of the selection that can be joined, with the sibling after it.": {
    "_translate": "加入选定的块，或可以加入的选定块的最近祖先，与其后的兄弟节点。",
    "_note": ""
  },
  "Lift the selected block, or the closest ancestor block of the selection that can be lifted, out of its parent node.": {
    "_translate": "将选定的块或可以提升的最近的祖先块从其父节点中提升出来。",
    "_note": ""
  },
  "If the selection is in a node whose type has a truthy code property in its spec, replace the selection with a newline character.": {
    "_translate": "如果选区位于其规范中具有真值<a href=\"#model.NodeSpec.code\"><code>code</code></a>属性的节点中，则用换行符替换选区。",
    "_note": ""
  },
  "When the selection is in a node with a truthy code property in its spec, create a default block after the code block, and move the cursor there.": {
    "_translate": "当选区位于其规范中具有真值<a href=\"#model.NodeSpec.code\"><code>code</code></a>属性的节点时，在代码块后创建一个默认块，并将光标移到那里。",
    "_note": ""
  },
  "If a block node is selected, create an empty paragraph before (if it is its parent's first child) or after it.": {
    "_translate": "如果选择了一个块节点，则在其前面（如果它是其父节点的第一个子节点）或后面创建一个空段落。",
    "_note": ""
  },
  "If the cursor is in an empty textblock that can be lifted, lift the block.": {
    "_translate": "如果光标在可以提升的空文本块中，请提升该块。",
    "_note": ""
  },
  "Split the parent block of the selection. If the selection is a text selection, also delete its content.": {
    "_translate": "拆分所选内容的父块。如果所选内容是文本选择，还要删除其内容。",
    "_note": ""
  },
  "Create a variant of splitBlock that uses a custom function to determine the type of the newly split off block.": {
    "_translate": "创建一个<a href=\"#commands.splitBlock\"><code>splitBlock</code></a>的变体，使用自定义函数来确定新分离块的类型。",
    "_note": ""
  },
  "Acts like splitBlock, but without resetting the set of active marks at the cursor.": {
    "_translate": "像 <a href=\"#commands.splitBlock\"><code>splitBlock</code></a>，但不会重置光标处的活动标记集。",
    "_note": ""
  },
  "Move the selection to the node wrapping the current selection, if any. (Will not select the document node.)": {
    "_translate": "将选择移动到包裹当前选择的节点（如果有）。(不会选择文档节点。)",
    "_note": ""
  },
  "Select the whole document.": {
    "_translate": "选择整个文档。",
    "_note": ""
  },
  "Moves the cursor to the start of current text block.": {
    "_translate": "将光标移动到当前文本块的开头。",
    "_note": ""
  },
  "Moves the cursor to the end of current text block.": {
    "_translate": "将光标移动到当前文本块的末尾。",
    "_note": ""
  },
  "Wrap the selection in a node of the given type with the given attributes.": {
    "_translate": "将选定内容包裹在具有给定属性的给定类型的节点中。",
    "_note": ""
  },
  "Returns a command that tries to set the selected textblocks to the given node type with the given attributes.": {
    "_translate": "返回一个命令，尝试将选定的文本块设置为给定节点类型，并带有给定的属性。",
    "_note": ""
  },
  "Create a command function that toggles the given mark with the given attributes. Will return false when the current selection doesn't support that mark. This will remove the mark if any marks of that type exist in the selection, or add it otherwise. If the selection is empty, this applies to the stored marks instead of a range of the document.": {
    "_translate": "创建一个命令函数，用于切换给定标记及其属性。当当前选择不支持该标记时，将返回<code>false</code>。如果选择中存在该类型的任何标记，则将其移除，否则添加它。如果选择为空，则应用于<a href=\"#state.EditorState.storedMarks\">存储的标记</a>而不是文档的某个范围。",
    "_note": ""
  },
  "Controls whether, when part of the selected range has the mark already and part doesn't, the mark is removed (true, the default) or added (false).": {
    "_translate": "控制当所选范围的一部分已经有标记而另一部分没有时，标记是被移除（<code>true</code>，默认）还是被添加（<code>false</code>）。",
    "_note": ""
  },
  "When set to false, this will prevent the command from acting on the content of inline nodes marked as atoms that are completely covered by a selection range.": {
    "_translate": "当设置为 false 时，这将阻止命令对标记为<a href=\"#model.NodeSpec.atom\">原子</a>的内联节点的内容进行操作，这些节点完全被选区范围覆盖。",
    "_note": ""
  },
  "Wrap a command so that, when it produces a transform that causes two joinable nodes to end up next to each other, those are joined. Nodes are considered joinable when they are of the same type and when the isJoinable predicate returns true for them or, if an array of strings was passed, if their node type name is in that array.": {
    "_translate": "将命令包装起来，以便当它产生一个变换导致两个可连接的节点最终相邻时，这些节点会被连接。当节点类型相同时，并且<code>isJoinable</code>谓词对它们返回true时，或者如果传递了一个字符串数组，如果它们的节点类型名称在该数组中，则认为这些节点是可连接的。",
    "_note": ""
  },
  "Depending on the detected platform, this will hold pcBasekeymap or macBaseKeymap.": {
    "_translate": "根据检测到的平台，这将包含\n<a href=\"#commands.pcBaseKeymap\"><code>pcBasekeymap</code></a> 或\n<a href=\"#commands.macBaseKeymap\"><code>macBaseKeymap</code></a>。",
    "_note": ""
  },
  "A basic keymap containing bindings not specific to any schema. Binds the following keys (when multiple commands are listed, they are chained with chainCommands):": {
    "_translate": "一个基本的键映射，包含不特定于任何模式的绑定。\n绑定以下键（当列出多个命令时，它们通过<a href=\"#commands.chainCommands\"><code>chainCommands</code></a>链接）：",
    "_note": ""
  },
  "A copy of pcBaseKeymap that also binds Ctrl-h like Backspace, Ctrl-d like Delete, Alt-Backspace like Ctrl-Backspace, and Ctrl-Alt-Backspace, Alt-Delete, and Alt-d like Ctrl-Delete.": {
    "_translate": "<code>pcBaseKeymap</code> 的副本，还将 <strong>Ctrl-h</strong> 绑定为退格键，<strong>Ctrl-d</strong> 绑定为删除键，<strong>Alt-Backspace</strong> 绑定为 Ctrl-退格键，<strong>Ctrl-Alt-Backspace</strong>、<strong>Alt-Delete</strong> 和 <strong>Alt-d</strong> 绑定为 Ctrl-删除键。",
    "_note": ""
  },
  "An implementation of an undo/redo history for ProseMirror. This history is selective, meaning it does not just roll back to a previous state but can undo some changes while keeping other, later changes intact. (This is necessary for collaborative editing, and comes up in other situations as well.)": {
    "_translate": "实现ProseMirror的撤销/重做历史。这个历史是<em>选择性</em>的，这意味着它不仅仅是回滚到以前的状态，而是可以撤销一些更改，同时保留其他更晚的更改。（这是协作编辑所必需的，并且在其他情况下也会出现。）",
    "_note": ""
  },
  "Returns a plugin that enables the undo history for an editor. The plugin will track undo and redo stacks, which can be used with the undo and redo commands.": {
    "_translate": "返回一个启用编辑器撤销历史的插件。该插件将跟踪撤销和重做堆栈，可以与<a href=\"#history.undo\"><code>undo</code></a>和<a href=\"#history.redo\"><code>redo</code></a>命令一起使用。",
    "_note": ""
  },
  "You can set an \"addToHistory\" metadata property of false on a transaction to prevent it from being rolled back by undo.": {
    "_translate": "你可以在事务上设置<code>\"addToHistory\"</code> <a href=\"#state.Transaction.setMeta\">元数据属性</a>为<code>false</code>，以防止它被撤销操作回滚。",
    "_note": ""
  },
  "The amount of history events that are collected before the oldest events are discarded. Defaults to 100.": {
    "_translate": "收集的历史事件数量，在最早的事件被丢弃之前。默认值为100。",
    "_note": ""
  },
  "The delay between changes after which a new group should be started. Defaults to 500 (milliseconds). Note that when changes aren't adjacent, a new group is always started.": {
    "_translate": "更改之间的延迟时间之后应启动一个新组。默认值为500（毫秒）。请注意，当更改不相邻时，总是会启动一个新组。",
    "_note": ""
  },
  "A command function that undoes the last change, if any.": {
    "_translate": "一个撤销上次更改（如果有）的命令功能。",
    "_note": ""
  },
  "A command function that redoes the last undone change, if any.": {
    "_translate": "一个重做上次撤销更改的命令功能（如果有的话）。",
    "_note": ""
  },
  "A command function that undoes the last change. Don't scroll the selection into view.": {
    "_translate": "一个撤销上次更改的命令功能。不要滚动选择到视图中。",
    "_note": ""
  },
  "A command function that redoes the last undone change. Don't scroll the selection into view.": {
    "_translate": "一个重做上次撤销更改的命令功能。不要滚动选择到视图中。",
    "_note": ""
  },
  "The amount of undoable events available in a given state.": {
    "_translate": "在给定状态下可撤销事件的数量。",
    "_note": ""
  },
  "The amount of redoable events available in a given editor state.": {
    "_translate": "给定编辑器状态下可重做事件的数量。",
    "_note": ""
  },
  "Set a flag on the given transaction that will prevent further steps from being appended to an existing history event (so that they require a separate undo command to undo).": {
    "_translate": "在给定的事务上设置一个标志，以防止进一步的步骤被附加到现有的历史事件中（这样它们需要单独的撤销命令来撤销）。",
    "_note": ""
  },
  "This module implements an API into which a communication channel for collaborative editing can be hooked. See the guide for more details and an example.": {
    "_translate": "该模块实现了一个API，可以挂接用于协作编辑的通信通道。有关更多详细信息和示例，请参见<a href=\"/docs/guide/#collab\">指南</a>。",
    "_note": ""
  },
  "Creates a plugin that enables the collaborative editing framework for the editor.": {
    "_translate": "创建一个插件，使编辑器的协作编辑框架成为可能。",
    "_note": ""
  },
  "The starting version number of the collaborative editing. Defaults to 0.": {
    "_translate": "协同编辑的起始版本号。默认为 0。",
    "_note": ""
  },
  "This client's ID, used to distinguish its changes from those of other clients. Defaults to a random 32-bit number.": {
    "_translate": "此客户端的ID，用于将其更改与其他客户端的更改区分开来。默认值为一个随机的32位数字。",
    "_note": ""
  },
  "Get the version up to which the collab plugin has synced with the central authority.": {
    "_translate": "获取collab插件已与中央权限同步的版本。",
    "_note": ""
  },
  "Create a transaction that represents a set of new steps received from the authority. Applying this transaction moves the state forward to adjust to the authority's view of the document.": {
    "_translate": "创建一个表示从权威接收到的一组新步骤的事务。应用此事务将使状态前进，以调整到权威对文档的视图。",
    "_note": ""
  },
  "When enabled (the default is false), if the current selection is a text selection, its sides are mapped with a negative bias for this transaction, so that content inserted at the cursor ends up after the cursor. Users usually prefer this, but it isn't done by default for reasons of backwards compatibility.": {
    "_translate": "启用时（默认值为<code>false</code>），如果当前选择是<a href=\"#state.TextSelection\">文本选择</a>，则在此事务中其两侧将映射为负偏差，以便在光标处插入的内容最终位于光标之后。用户通常更喜欢这样，但由于向后兼容性原因，默认情况下不会这样做。",
    "_note": ""
  },
  "Provides data describing the editor's unconfirmed steps, which need to be sent to the central authority. Returns null when there is nothing to send.": {
    "_translate": "提供描述编辑器未确认步骤的数据，这些数据需要发送到中央机构。当没有要发送的内容时，返回null。",
    "_note": ""
  },
  "origins holds the original transactions that produced each steps. This can be useful for looking up time stamps and other metadata for the steps, but note that the steps may have been rebased, whereas the origin transactions are still the old, unchanged objects.": {
    "_translate": "<code>origins</code> 保存了产生每个步骤的<em>原始</em>交易。这对于查找步骤的时间戳和其他元数据很有用，但请注意，步骤可能已经被重新定位，而原始交易仍然是旧的、未更改的对象。",
    "_note": ""
  },
  "A plugin for conveniently defining key bindings.": {
    "_translate": "一个方便定义键绑定的插件。",
    "_note": ""
  },
  "Create a keymap plugin for the given set of bindings.": {
    "_translate": "为给定的绑定集创建一个键映射插件。",
    "_note": ""
  },
  "Bindings should map key names to command-style functions, which will be called with (EditorState, dispatch, EditorView) arguments, and should return true when they've handled the key. Note that the view argument isn't part of the command protocol, but can be used as an escape hatch if a binding needs to directly interact with the UI.": {
    "_translate": "绑定应将键名映射到<a href=\"#commands\">命令</a>样式的函数，这些函数将使用<code>(EditorState, dispatch, EditorView)</code>参数调用，并且在处理键时应返回true。请注意，view参数不是命令协议的一部分，但如果绑定需要直接与UI交互，可以用作逃生舱口。",
    "_note": ""
  },
  "Key names may be strings like \"Shift-Ctrl-Enter\"—a key identifier prefixed with zero or more modifiers. Key identifiers are based on the strings that can appear in KeyEvent.key. Use lowercase letters to refer to letter keys (or uppercase letters if you want shift to be held). You may use \"Space\" as an alias for the \" \" name.": {
    "_translate": "键名可以是像 <code>\"Shift-Ctrl-Enter\"</code> 这样的字符串——一个键标识符前缀加上零个或多个修饰符。键标识符基于可以出现在 <a href=\"https:///developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key\"><code>KeyEvent.key</code></a> 中的字符串。使用小写字母来表示字母键（如果希望按住 shift 键，则使用大写字母）。你可以使用 <code>\"Space\"</code> 作为 <code>\" \"</code> 名称的别名。",
    "_note": ""
  },
  "Modifiers can be given in any order. Shift- (or s-), Alt- (or a-), Ctrl- (or c- or Control-) and Cmd- (or m- or Meta-) are recognized. For characters that are created by holding shift, the Shift- prefix is implied, and should not be added explicitly.": {
    "_translate": "修饰符可以以任何顺序给出。<code>Shift-</code>（或<code>s-</code>）、<code>Alt-</code>（或<code>a-</code>）、<code>Ctrl-</code>（或<code>c-</code>或<code>Control-</code>）和<code>Cmd-</code>（或<code>m-</code>或<code>Meta-</code>）是被识别的。对于通过按住 shift 创建的字符，<code>Shift-</code>前缀是隐含的，不应明确添加。",
    "_note": ""
  },
  "You can use Mod- as a shorthand for Cmd- on Mac and Ctrl- on other platforms.": {
    "_translate": "你可以使用<code>Mod-</code>作为Mac上的<code>Cmd-</code>和其他平台上的<code>Ctrl-</code>的简写。",
    "_note": ""
  },
  "You can add multiple keymap plugins to an editor. The order in which they appear determines their precedence (the ones early in the array get to dispatch first).": {
    "_translate": "您可以向编辑器添加多个键映射插件。它们出现的顺序决定了它们的优先级（数组中靠前的插件优先分派）。",
    "_note": ""
  },
  "This module defines a plugin for attaching input rules to an editor, which can react to or transform text typed by the user. It also comes with a bunch of default rules that can be enabled in this plugin.": {
    "_translate": "此模块定义了一个插件，用于将<em>输入规则</em>附加到编辑器，可以对用户输入的文本做出反应或进行转换。它还附带了一些可以在此插件中启用的默认规则。",
    "_note": ""
  },
  "Given a set of bindings (using the same format as keymap), return a keydown handler that handles them.": {
    "_translate": "给定一组绑定（使用与<a href=\"#keymap.keymap\"><code>keymap</code></a>相同的格式），返回一个处理它们的<a href=\"#view.EditorProps.handleKeyDown\">keydown处理程序</a>。",
    "_note": ""
  },
  "Input rules are regular expressions describing a piece of text that, when typed, causes something to happen. This might be changing two dashes into an emdash, wrapping a paragraph starting with \"> \" into a blockquote, or something entirely different.": {
    "_translate": "输入规则是描述一段文本的正则表达式，当输入时，会引发某些事情的发生。这可能是将两个破折号变成一个长破折号，将以<code>\"&gt; \"</code>开头的段落包裹成一个引用块，或者是完全不同的事情。",
    "_note": ""
  },
  "Create an input rule. The rule applies when the user typed something and the text directly in front of the cursor matches match, which should end with $.": {
    "_translate": "创建输入规则。当用户输入内容且光标前的文本匹配<code>match</code>时，该规则适用，匹配内容应以<code>$</code>结尾。",
    "_note": ""
  },
  "The handler can be a string, in which case the matched text, or the first matched group in the regexp, is replaced by that string.": {
    "_translate": "<code>handler</code> 可以是一个字符串，在这种情况下，匹配的文本或正则表达式中的第一个匹配组将被该字符串替换。",
    "_note": ""
  },
  "Or a it can be a function, which will be called with the match array produced by RegExp.exec, as well as the start and end of the matched range, and which can return a transaction that describes the rule's effect, or null to indicate the input was not handled.": {
    "_translate": "或者它可以是一个函数，该函数将使用由<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\"><code>RegExp.exec</code></a>生成的匹配数组，以及匹配范围的开始和结束，并且可以返回描述规则效果的<a href=\"#state.Transaction\">事务</a>，或者返回null以表示未处理输入。",
    "_note": ""
  },
  "When set to false, undoInputRule doesn't work on this rule.": {
    "_translate": "当设置为 false 时，<a href=\"#inputrules.undoInputRule\"><code>undoInputRule</code></a> 不适用于此规则。",
    "_note": ""
  },
  "By default, input rules will not apply inside nodes marked as code. Set this to true to change that, or to \"only\" to only match in such nodes.": {
    "_translate": "默认情况下，输入规则不会应用于标记为<a href=\"#model.NodeSpec.code\">code</a>的节点。将其设置为true以更改此设置，或设置为<code>\"only\"</code>以<em>仅</em>在此类节点中匹配。",
    "_note": ""
  },
  "Create an input rules plugin. When enabled, it will cause text input that matches any of the given rules to trigger the rule's action.": {
    "_translate": "创建一个输入规则插件。启用后，它将导致与任何给定规则匹配的文本输入触发该规则的操作。",
    "_note": ""
  },
  "This is a command that will undo an input rule, if applying such a rule was the last thing that the user did.": {
    "_translate": "这是一个命令，将撤销输入规则，如果应用这样的规则是用户最后做的事情。",
    "_note": ""
  },
  "The module comes with a number of predefined rules:": {
    "_translate": "该模块附带许多预定义规则：",
    "_note": ""
  },
  "Converts double dashes to an emdash.": {
    "_translate": "将双破折号转换为长破折号。",
    "_note": ""
  },
  "Converts three dots to an ellipsis character.": {
    "_translate": "将三个点转换为省略号字符。",
    "_note": ""
  },
  "“Smart” opening double quotes.": {
    "_translate": "“智能”开放双引号。",
    "_note": ""
  },
  "“Smart” closing double quotes.": {
    "_translate": "“Smart” 关闭双引号。",
    "_note": ""
  },
  "“Smart” opening single quotes.": {
    "_translate": "“智能”开放单引号。",
    "_note": ""
  },
  "“Smart” closing single quotes.": {
    "_translate": "“智能”关闭单引号。",
    "_note": ""
  },
  "Smart-quote related input rules.": {
    "_translate": "智能引号相关输入规则。",
    "_note": ""
  },
  "These utility functions take schema-specific parameters and create input rules specific to that schema.": {
    "_translate": "这些实用函数采用特定于模式的参数并创建特定于该模式的输入规则。",
    "_note": ""
  },
  "Build an input rule for automatically wrapping a textblock when a given string is typed. The regexp argument is directly passed through to the InputRule constructor. You'll probably want the regexp to start with ^, so that the pattern can only occur at the start of a textblock.": {
    "_translate": "为在输入特定字符串时自动包装文本块构建输入规则。<code>regexp</code> 参数直接传递给 <code>InputRule</code> 构造函数。你可能希望正则表达式以 <code>^</code> 开头，这样模式只能出现在文本块的开头。",
    "_note": ""
  },
  "nodeType is the type of node to wrap in. If it needs attributes, you can either pass them directly, or pass a function that will compute them from the regular expression match.": {
    "_translate": "<code>nodeType</code> 是要包装的节点类型。如果它需要属性，你可以直接传递它们，或者传递一个函数，该函数将从正则表达式匹配中计算它们。",
    "_note": ""
  },
  "Build an input rule that changes the type of a textblock when the matched text is typed into it. You'll usually want to start your regexp with ^ to that it is only matched at the start of a textblock. The optional getAttrs parameter can be used to compute the new node's attributes, and works the same as in the wrappingInputRule function.": {
    "_translate": "构建一个输入规则，当匹配的文本被输入到文本块中时，改变文本块的类型。你通常会希望以<code>^</code>开始你的正则表达式，这样它只会在文本块的开头匹配。可选的<code>getAttrs</code>参数可以用来计算新节点的属性，并且与<code>wrappingInputRule</code>函数中的用法相同。",
    "_note": ""
  },
  "By default, if there's a node with the same type above the newly wrapped node, the rule will try to join those two nodes. You can pass a join predicate, which takes a regular expression match and the node before the wrapped node, and can return a boolean to indicate whether a join should happen.": {
    "_translate": "默认情况下，如果在新包装的节点上方有一个相同类型的节点，规则将尝试<a href=\"#transform.Transform.join\">合并</a>这两个节点。您可以传递一个合并谓词，该谓词接受一个正则表达式匹配和包装节点之前的节点，并可以返回一个布尔值以指示是否应进行合并。",
    "_note": ""
  },
  "This is a plugin that adds a type of selection for focusing places that don't allow regular selection (such as positions that have a leaf block node, table, or the end of the document both before and after them).": {
    "_translate": "这是一个插件，添加了一种选择类型，用于聚焦不允许常规选择的位置（例如，具有叶块节点、表格或文档前后都有的结束位置）。",
    "_note": ""
  },
  "You'll probably want to load style/gapcursor.css, which contains basic styling for the simulated cursor (as a short, blinking horizontal stripe).": {
    "_translate": "您可能需要加载<code>style/gapcursor.css</code>，其中包含模拟光标的基本样式（作为一个短的、闪烁的水平条纹）。",
    "_note": ""
  },
  "By default, gap cursor are only allowed in places where the default content node (in the schema content constraints) is a textblock node. You can customize this by adding an allowGapCursor property to your node specs—if it's true, gap cursor are allowed everywhere in that node, if it's false they are never allowed.": {
    "_translate": "默认情况下，间隙光标只允许在默认内容节点（在模式内容约束中）是文本块节点的地方。您可以通过在节点规范中添加一个<code>allowGapCursor</code>属性来自定义此设置——如果为true，则在该节点中的任何地方都允许间隙光标，如果为<code>false</code>，则永远不允许。",
    "_note": ""
  },
  "Create a gap cursor plugin. When enabled, this will capture clicks near and arrow-key-motion past places that don't have a normally selectable position nearby, and create a gap cursor selection for them. The cursor is drawn as an element with class ProseMirror-gapcursor. You can either include style/gapcursor.css from the package's directory or add your own styles to make it visible.": {
    "_translate": "创建一个间隙光标插件。启用后，它将捕获点击\n靠近和箭头键移动经过的地方，这些地方附近没有通常\n可选择的位置，并为它们创建一个间隙光标选择。光标绘制为一个带有类\n<code>ProseMirror-gapcursor</code>的元素。你可以从包的目录中包含\n<code>style/gapcursor.css</code>，或者添加你自己的样式使其可见。",
    "_note": ""
  },
  "Gap cursor selections are represented using this class. Its $anchor and $head properties both point at the cursor position.": {
    "_translate": "使用此类表示间隙光标选择。其<code>$anchor</code>和<code>$head</code>属性都指向光标位置。",
    "_note": ""
  },
  "Create a gap cursor.": {
    "_translate": "创建一个间隙光标。",
    "_note": ""
  },
  "This module defines a simple schema. You can use it directly, extend it, or just pick out a few node and mark specs to use in a new schema.": {
    "_translate": "此模块定义了一个简单的模式。您可以直接使用它，扩展它，或者只选择一些节点和标记规范在一个新模式中使用。",
    "_note": ""
  },
  "This schema roughly corresponds to the document schema used by CommonMark, minus the list elements, which are defined in the prosemirror-schema-list module.": {
    "_translate": "这个模式大致对应于<a href=\"http://commonmark.org/\">CommonMark</a>使用的文档模式，减去列表元素，这些元素在<a href=\"#schema-list\"><code>prosemirror-schema-list</code></a>模块中定义。",
    "_note": ""
  },
  "To reuse elements from this schema, extend or read from its spec.nodes and spec.marks properties.": {
    "_translate": "要重用此模式中的元素，请扩展或读取其<code>spec.nodes</code>和<code>spec.marks</code><a href=\"#model.Schema.spec\">属性</a>。",
    "_note": ""
  },
  "Specs for the nodes defined in this schema.": {
    "_translate": "<a href=\"#model.NodeSpec\">节点规格</a>在此架构中定义。",
    "_note": ""
  },
  "NodeSpec The top level document node.": {
    "_translate": "NodeSpec 顶级文档节点。",
    "_note": ""
  },
  "A plain paragraph textblock. Represented in the DOM as a <p> element.": {
    "_translate": "一个普通的段落文本块。在DOM中表示为<code>&lt;p&gt;</code>元素。",
    "_note": ""
  },
  "A blockquote (<blockquote>) wrapping one or more blocks.": {
    "_translate": "<code>&lt;blockquote&gt;</code> 包含一个或多个块。",
    "_note": ""
  },
  "A horizontal rule (<hr>).": {
    "_translate": "一个水平线（<code>&lt;hr&gt;</code>）。",
    "_note": ""
  },
  "A heading textblock, with a level attribute that should hold the number 1 to 6. Parsed and serialized as <h1> to <h6> elements.": {
    "_translate": "一个标题文本块，具有一个<code>level</code>属性，该属性应包含数字1到6。解析并序列化为<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code>元素。",
    "_note": ""
  },
  "A code listing. Disallows marks or non-text inline nodes by default. Represented as a <pre> element with a <code> element inside of it.": {
    "_translate": "代码列表。默认情况下不允许标记或非文本内联节点。表示为<code>&lt;pre&gt;</code>元素，内部包含<code>&lt;code&gt;</code>元素。",
    "_note": ""
  },
  "The text node.": {
    "_translate": "文本节点",
    "_note": ""
  },
  "An inline image (<img>) node. Supports src, alt, and href attributes. The latter two default to the empty string.": {
    "_translate": "一个内联图像（<code>&lt;img&gt;</code>）节点。支持<code>src</code>、<code>alt</code>和<code>href</code>属性。后两者默认为空字符串。",
    "_note": ""
  },
  "A hard line break, represented in the DOM as <br>.": {
    "_translate": "一个硬换行符，在DOM中表示为<code>&lt;br&gt;</code>。",
    "_note": ""
  },
  "Specs for the marks in the schema.": {
    "_translate": "<a href=\"#model.MarkSpec\">标记规格</a> 用于架构中的标记。",
    "_note": ""
  },
  "A link. Has href and title attributes. title defaults to the empty string. Rendered and parsed as an <a> element.": {
    "_translate": "一个链接。具有<code>href</code>和<code>title</code>属性。<code>title</code>默认为空字符串。渲染和解析为<code>&lt;a&gt;</code>元素。",
    "_note": ""
  },
  "An emphasis mark. Rendered as an <em> element. Has parse rules that also match <i> and font-style: italic.": {
    "_translate": "一个强调标记。呈现为<code>&lt;em&gt;</code>元素。具有解析规则，也匹配<code>&lt;i&gt;</code>和<code>font-style: italic</code>。",
    "_note": ""
  },
  "A strong mark. Rendered as <strong>, parse rules also match <b> and font-weight: bold.": {
    "_translate": "一个强烈的标记。呈现为<code>&lt;strong&gt;</code>，解析规则也匹配<code>&lt;b&gt;</code>和<code>font-weight: bold</code>。",
    "_note": ""
  },
  "Code font mark. Represented as a <code> element.": {
    "_translate": "代码字体标记。表示为 <code>&lt;code&gt;</code> 元素。",
    "_note": ""
  },
  "This module exports list-related schema elements and commands. The commands assume lists to be nestable, with the restriction that the first child of a list item is a plain paragraph.": {
    "_translate": "此模块导出与列表相关的模式元素和命令。命令假定列表是可嵌套的，限制是列表项的第一个子项是一个普通段落。",
    "_note": ""
  },
  "These are the node specs:": {
    "_translate": "这些是节点规格：",
    "_note": ""
  },
  "A bullet list node spec, represented in the DOM as <ul>.": {
    "_translate": "一个子弹列表节点规范，在DOM中表示为<code>&lt;ul&gt;</code>。",
    "_note": ""
  },
  "An ordered list node spec. Has a single attribute, order, which determines the number at which the list starts counting, and defaults to 1. Represented as an <ol> element.": {
    "_translate": "有序列表<a href=\"#model.NodeSpec\">节点规范</a>。有一个单一属性，<code>order</code>，它决定列表开始计数的数字，默认值为1。表示为<code>&lt;ol&gt;</code>元素。",
    "_note": ""
  },
  "A list item (<li>) spec.": {
    "_translate": "一个列表项 (<code>&lt;li&gt;</code>) 规范。",
    "_note": ""
  },
  "Convenience function for adding list-related node types to a map specifying the nodes for a schema. Adds orderedList as \"ordered_list\", bulletList as \"bullet_list\", and listItem as \"list_item\".": {
    "_translate": "用于将与列表相关的节点类型添加到指定架构节点的映射的便捷函数。添加\n<a href=\"#schema-list.orderedList\"><code>orderedList</code></a> 作为 <code>\"ordered_list\"</code>，\n<a href=\"#schema-list.bulletList\"><code>bulletList</code></a> 作为 <code>\"bullet_list\"</code>，以及\n<a href=\"#schema-list.listItem\"><code>listItem</code></a> 作为 <code>\"list_item\"</code>。",
    "_note": ""
  },
  "itemContent determines the content expression for the list items. If you want the commands defined in this module to apply to your list structure, it should have a shape like \"paragraph block*\" or \"paragraph (ordered_list | bullet_list)*\". listGroup can be given to assign a group name to the list node types, for example \"block\".": {
    "_translate": "<code>itemContent</code> 确定列表项的内容表达式。如果您希望此模块中定义的命令应用于您的列表结构，它应该具有类似 <code>\"paragraph block*\"</code> 或 <code>\"paragraph (ordered_list | bullet_list)*\"</code> 的形状。可以给 <code>listGroup</code> 分配一个组名称给列表节点类型，例如 <code>\"block\"</code>。",
    "_note": ""
  },
  "Using this would look something like this:": {
    "_translate": "使用这个看起来像这样：",
    "_note": ""
  },
  "The following functions are commands:": {
    "_translate": "以下功能是<a href=\"/docs/guide/#commands\">命令</a>:",
    "_note": ""
  },
  "Returns a command function that wraps the selection in a list with the given type an attributes. If dispatch is null, only return a value to indicate whether this is possible, but don't actually perform the change.": {
    "_translate": "返回一个命令函数，该函数将选择内容包装在具有给定类型和属性的列表中。如果<code>dispatch</code>为null，则仅返回一个值以指示这是否可能，但实际上不执行更改。",
    "_note": ""
  },
  "Build a command that splits a non-empty textblock at the top level of a list item by also splitting that list item.": {
    "_translate": "构建一个命令，通过拆分列表项来拆分列表项顶层的非空文本块。",
    "_note": ""
  },
  "Acts like splitListItem, but without resetting the set of active marks at the cursor.": {
    "_translate": "像 <a href=\"#schema-list.splitListItem\"><code>splitListItem</code></a>，但不重置光标处的活动标记集。",
    "_note": ""
  },
  "Create a command to lift the list item around the selection up into a wrapping list.": {
    "_translate": "创建一个命令，将选择范围内的列表项提升到一个包裹列表中。",
    "_note": ""
  },
  "Create a command to sink the list item around the selection down into an inner list.": {
    "_translate": "创建一个命令，将选择范围内的列表项下沉到内部列表中。",
    "_note": ""
  }
}