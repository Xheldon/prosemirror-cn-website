{
  "This example shows how to use node decorations to influence the behavior of node views. Specifically, we'll define a plugin that allows the user to fold some nodes (hiding their content).": {
    "_translate": "这个例子展示了如何使用节点装饰来影响节点视图的行为。具体来说，我们将定义一个插件，允许用户<em>折叠</em>一些节点（隐藏它们的内容）。",
    "_note": ""
  },
  "We start by modifying the basic schema so that the top level consists of a sequence of sections, each of which must contain a heading followed by some arbitrary blocks.": {
    "_translate": "我们首先修改基本模式，使顶层由一系列部分组成，每个部分必须包含一个标题，后跟一些任意的块。",
    "_note": ""
  },
  "To display these sections, we'll use a node view that shows a little uneditable header with a button in it. It looks through the direct decorations that it receives, and when one of those has the foldSection property in its spec, it considers itself folded, which is reflected in the type of arrow shown on the button and whether the content is hidden or visible.": {
    "_translate": "要显示这些部分，我们将使用一个节点视图，该视图显示一个带有按钮的不可编辑的标题。它会查看收到的直接装饰，当其中一个装饰的规范中具有<code>foldSection</code>属性时，它会认为自己是折叠的，这反映在按钮上显示的箭头类型以及内容是隐藏还是可见。",
    "_note": ""
  },
  "The mouse handler for the button just calls setFolding, which we will define in a moment.": {
    "_translate": "按钮的鼠标处理程序只调用<code>setFolding</code>，我们稍后会定义。",
    "_note": ""
  },
  "It would mostly work to avoid using decorations for a feature like this, and just keep folding status in an instance property in the node view. There are two downsides to this approach, though: Firstly, node views may get recreated for a number of reasons (when their DOM gets unexpectedly mutated, or when the view update algorithm associates them with the wrong section node), which causes their internal state to be lost. Secondly, maintaining this kind of state explicitly on the editor level makes it possible to influence it from outside the editor, inspect it, or serialize it.": {
    "_translate": "避免为这样的功能使用装饰器大部分是可行的，只需将折叠状态保存在节点视图的实例属性中即可。不过，这种方法有两个缺点：首先，节点视图可能会因为多种原因被重新创建（当它们的DOM意外发生变化，或者视图更新算法将它们与错误的部分节点关联时），这会导致它们的内部状态丢失。其次，在编辑器级别显式维护这种状态，可以使其从编辑器外部受到影响、被检查或序列化。",
    "_note": ""
  },
  "Thus, here the state is tracked with a plugin. The role of this plugin is to track the set of folding decorations and to install the above node view.": {
    "_translate": "因此，这里的状态是通过一个插件来跟踪的。这个插件的作用是跟踪折叠装饰集并安装上述节点视图。",
    "_note": ""
  },
  "The substance of this code is the state update method. It starts by mapping the fold decorations forward through the transaction, so that they continue to be aligned to the section's updated positions.": {
    "_translate": "此代码的实质是状态更新方法。它首先通过事务映射折叠装饰，使它们继续与部分的更新位置对齐。",
    "_note": ""
  },
  "And then it checks whether the transaction contains metadata that instructs it to add or remove a folded node. We use the plugin itself as metadata label. If this is present, it will hold a {pos: number, fold: boolean} object. Depending on the value of fold, the code adds or removes a node decoration at the given position.": {
    "_translate": "然后它会检查事务是否包含指示其添加或删除折叠节点的元数据。我们使用插件本身作为元数据标签。如果存在，它将包含一个<code>{pos: number, fold: boolean}</code>对象。根据<code>fold</code>的值，代码会在给定位置添加或删除节点装饰。",
    "_note": ""
  },
  "The setFolding function dispatches these kinds of transactions. In addition, it makes sure to push the selection out of the folded node, if possible.": {
    "_translate": "<code>setFolding</code> 函数调度这些类型的事务。此外，它确保在可能的情况下将选择推送出折叠节点。",
    "_note": ""
  },
  "Loading this plugin alongside a schema that has sections will give you an editor with foldable sections.": {
    "_translate": "加载此插件以及具有部分的架构将为您提供一个带有可折叠部分的编辑器。",
    "_note": ""
  },
  "(To make them usable, you'd also need some kind of commands to create and join sections, but that is left out of the scope of this example.)": {
    "_translate": "为了使它们可用，您还需要某种命令来创建和加入部分，但这不在本示例的范围内。",
    "_note": ""
  }
}